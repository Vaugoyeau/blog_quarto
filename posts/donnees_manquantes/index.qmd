---
title: "Les donn√©es manquantes"
author: "Marie Vaugoyeau"
date: "2024/02/20"
date-format: "D MMMM YYYY"
categories: [twitch, Rnewbies, statistiques, analyse de donn√©es]
toc: true
toc-title: Sur cette page
---

[![](deut.png){fig-align="center"}](https://500px.com/p/antoinemach?view=photos)

::: {.callout-note icon="false"}
[**Twitch du 20 f√©vrier 2024**](https://www.twitch.tv/videos/2068439847).

Code disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_donnees_manquantes).
:::

# D√©finitions

Les donn√©es manquantes sont les donn√©es qui ne sont pas pr√©sentes.\
La donn√©e peut-√™tre remplac√©e dans le tableau par :

-   `NA`\
-   Une autre valeur d√©pendante des donn√©es ou de la personne qui s'en ai occup√©e : `0`, `NO`, `999`...

::: callout-note
Quelques soit le cas, il existent plusieurs origines aux donn√©es manquantes.
:::

# Type de donn√©es manquantes

Les donn√©es manquantes, repr√©sent√©es par `NA` ou autre peuvent avoir plusieurs origines :

-   La donn√©e **n'est pas compatible**. *Par exemple, une personne rentre du texte au lieu d'un num√©ro de t√©l√©phone.* Dans ce cas le **syst√®me ne prends pas en charge** la r√©ponse et la qualifie en `NA` pour `Not Applicable`\
-   La donn√©e **n'existe pas**. *Par exemple la personne n'a pas de num√©ro de t√©l√©phone*, dans ce cas, le syst√®me la qualifie de `NA` pour `Not Available`\
-   La donn√©e **existe mais n'a pas √©t√© communiqu√©es**. *Par exemple la personne a refus√© de donner son num√©ro*, dans ce cas, le syst√®me la qualifie de `NA` pour `Not Answer`

Dans tous les cas, la **seule information transmise** est que la **donn√©es n'est pas disponible**.\
Il n'est pas toujours possible de cerner l'origine du probl√®me mais cela n'emp√™che pas d'agir.\
Il faut commencer par se demander ce que **signifie cette absence** et **comment elle va impacter** notre syst√®me.

# Cons√©quences des valeurs manquantes

-   **Perte d'information** : Si la donn√©e peut-√™tre retrouv√©e ou remplac√©e, pourquoi s'en emp√™cher ?\
-   **Erreur dans la g√©n√©ralisation** : Si beaucoup de donn√©es sont manquantes et que les conclusions se basent uniquement sur celles pr√©sentent, **est-ce que cela repr√©sente vraiment la r√©alit√© ?**\
-   Comportement de certains mod√®les stats

```{r}

library(tidyverse)
library(missMDA)
data("snorena")

# r√©gression logistique 
regression_logistique <- glm(
  snore ~ age + weight + size + alcohol, 
  family = binomial, 
  data = snorena
  )

regression_logistique
summary(regression_logistique)

regression_logistique_2 <- glm(
  snore ~ age + alcohol, 
  family = binomial, 
  data = snorena
  )

AIC(regression_logistique, regression_logistique_2)
summary(regression_logistique_2)

# ACP
library(FactoMineR)

acp <- PCA(snorena |> select(where(is.numeric)))

```

La r√©gression logistique supprime les lignes avec les donn√©es manquantes alors que l'analyse en composantes principales les remplace par la moyenne de la colonne.\
Il est donc important de garder en t√™te comment sont trait√©s les donn√©es manquantes en fonction des statistiques utilis√©es.

# Identifier les valeurs manquantes

Pour savoir comment agir, il faut commencer par quantifier et localiser les valeurs manquantes.

Une r√©alisation simple est l'utilisation de la fonction `summary()` du package `{base}`.

```{r}

summary(snorena)

```

Le package `{naniar}` est sp√©cialement adapt√© √† la visualisation des donn√©es manquantes.

Visualisation du nombre (argument `show_pct = FALSE`) ou de la proportion (argument `show_pct = TRUE`) de donn√©es manquantes gr√¢ce aux fonctions `gg_miss_var()`.

```{r}
library(naniar)

gg_miss_var(snorena, show_pct = TRUE)

```

La fonction `gg_miss_upset()` permet de repr√©senter sur un graphique les variables qui ont des donn√©es manquantes et le lien entre les colonnes.\

```{r}

gg_miss_upset(snorena)

```

La fonction `geom_miss_point()` permet de visualiser les valeurs manquantes sur les nuage de poin.

```{r}

ggplot(snorena) +
  aes(x = size, y = weight) +
  geom_miss_point() +
  theme_classic()

```

Et il existe d'autres fonctions :

-   `vis_miss()` du package `{visdata}`\
-   `md.pattern()` du package `{mice}`

```{r}

visdat::vis_miss(snorena)
mice::md.pattern(snorena, rotate.names = TRUE)

```

::: callout-warning
## D√©tection des valeurs manquantes

Les donn√©es manquantes peuvent avoir √©t√© remplac√©es par d'autres. Il est n√©cessaire de faite une **analyse descriptive** pour les d√©tecter.
:::

# L'analyse descriptive

L'analyse descriptive a pour but d'analyser les variables pour conna√Ætre la nature des donn√©es mais aussi identifier les valeurs extr√™mes (√† ne pas confondre avec aberrantes).

Utilisation de fonctions rapide comme :

-   `skim()` du package `{skimr}`\
-   `dfSummary()` du package `{summarytools}`\
-   `create_report()` du package `{DataExplorer}` : [`DataExplorer::create_report(snorena)`](https://github.com/Vaugoyeau/twitch_donnees_manquantes/blob/master/report.html)

```{r}

skimr::skim(snorena)

summarytools::dfSummary(snorena)
```

# Traitement des valeurs manquantes

-   Remplacer la donn√©e manquante par :
    -   La vraie valeur s'il est possible de la retrouver.\
    -   Une valeur de remplacement :
        -   D√©termin√©e √† partir des autres donn√©es de la variables : *moyenne*, *m√©diane*, *minimum*, *maximum*...\
        -   Mod√©lis√©e √† partir des autres variables gr√¢ce √† *une r√©gression lin√©aire*, *une ACP*...\
-   Ne pas remplacer la donn√©es mais garder le `NA`\
-   Supprimer la ligne ou la colonne concern√©e. **Cette solution est la moins envisageable et ne doit √™tre mise en place que si les deux autres ne sont pas possibles.**

```{r}

# remplacement par r√©gression logistique
snore_pred <- predict(
  regression_logistique_2, 
  newdata = snorena |> filter(is.na(snore))
  )

snorena_mod <- snorena |> 
  mutate(
    snore = 
      case_when(
        is.na(snore) ~ "N",
        TRUE ~ snore
      ) |> 
      as.factor()
  )

summary(snorena_mod)

# r√©gression lin√©aire
ggplot(snorena_mod) + 
  aes(x = weight, y = size) +
  geom_miss_point() +
  geom_smooth(method = "lm") +
  ggpubr::stat_regline_equation() +
  theme_classic()


snorena_mod <- snorena_mod |> 
  mutate(
    size = 
      case_when(
        is.na(size) ~ 120 + 0.69 * weight,
        TRUE ~ size
      )
  )

summary(snorena_mod)


# regression lin√©aire
reg_lin <- lm(weight ~ size, data = snorena)
reg_lin$coefficients

snorena_mod <- snorena_mod |> 
  mutate(
    weight = 
      case_when(
        is.na(weight) ~ 
          reg_lin$coefficients[1] + reg_lin$coefficients[2] * size,
        TRUE ~ weight
      )
  )

summary(snorena_mod)

```

::: callout-note
# `replace_na()` du package `{tidyr}`

Lors du live j'ai oubli√© de pr√©senter la fonction `replace_na()` du package `{tidyr}` !\
Cette fonction permet de remplacer les valeurs manquantes [d'une colonne ou plusieurs colonnes par une valeur sp√©cifique](https://tidyr.tidyverse.org/reference/replace_na.html).
:::

# Pour finir

L'id√©e de cette article est d'initier au traitement des donn√©es manquantes, pas de remplacer une formation dessus üòä\
Bonne journ√©e,\
Marie
