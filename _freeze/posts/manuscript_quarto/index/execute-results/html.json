{
  "hash": "5392c95c0661645f7abd3a8ee9b55edc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Réaliser un article scientifique avec `Quarto`\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2025/03/18\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, analyse de données, statistiques, quarto]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](feuilles.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 18 mars 2025**](https://www.twitch.tv/videos/2408949837).\\\n\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_manuscript).  \n:::\n\n# C'est quoi Quarto ?  \n\n![](https://quarto.org/quarto.png)\n\nAprès une dizaine d'année de développement sur `RMarkdown`, [Posit](https://posit.co/) (anciennement RStudio) [a annoncé en 2022](https://posit.co/blog/announcing-quarto-a-new-scientific-and-technical-publishing-system/) la naissance de `Quarto`.\\\nDonc `Quarto` est l'héritier de [RMarkdown](https://quarto.org/quarto.png) qui combien le texte sous format [Markdown](https://quarto.org/docs/authoring/markdown-basics.html) et les portions de code appelé `chunk`.\\\nLe code peut-être en `R` comme en `Python`.\n\nComme `RMarkdown`, sa grande force est de rendre **reproductible**, **répétable** et **réutilisable** les lignes de codes.\n\n::: callout-tip\n## Innovation\n\nIl n'y aura pas ou peu d'innovations sur `RMarkdown` maintenant que `Quarto` existe.\n:::\n\n# Création d'un projet `Quarto`\n\nLa grosse nouveauté entre `RMarkdown` et `Quarto` est que `Quarto` est une infrastructure plus large qui remplace le classique projet RStudio.\n\nPour créer un projet `Quarto`, c'est très simple, il suffit de cliquer sur l'icône bleue projet ou `File > New Project...`.\\\nEnsuite, il faut cliquer sur `Quarto project`. S'il n'apparaît pas ce que RStudio n'est pas à jour. Il est nécessaire de commencer par mettre à jour R et RStudio.\n\nLe projet créé contient trois fichiers :\n\n\\_ Le fichier `_quarto.yml` qui contient les paramétrages du dossier\\\n\\_ Le fichier `nom_du_projet.qmd` qui est un document `Quarto` généré automatiquement\\\n\\_ Le fichier `nom_du_projet.Rproj`, le fichier du projet\n\nLe document `Quarto` généré automatiquement est très simple. Il est là pour comprendre le fonctionnement de base. Il est très utile pour apprendre à manipuler `Quarto`.\n\n# Lecture d'un fichier `Quarto`  \n\nLes fichiers `Quarto` ont une composition classique : une en-tête `YAML` facultative avec un enchaînement de **texte** et de **blocs de codes**.\n\nDeux `vues` sont disponibles :\n\n\\_ `Visual` : Qui ressemble à ce qui sera obtenu avec des clics boutons proches d'un logiciel de traitement texte tels que `Word`, `Mot`, `Writer`...\\\n\\_ `Source` : Qui contient le script en `Markdown`\n\n## En-tête `YAML` (facultative)\n\nElle permet de paramétrer les sorties du document mais elle n'est pas obligatoire\n\n::: callout-important\n## Indentation\n\nSi l'indentation (les espaces avant le texte) n'a que peu d'importance dans le code `R`, elle est très importante en `YAML` et doit-être regardé avec attention !\n:::\n\nLe document généré automatiquement ne possède qu'un titre dans l'en-tête.\n\n## Syntaxe du texte\n\nLe texte en `Quarto`, utilise la [syntaxe `Markdown`](https://quarto.org/docs/authoring/markdown-basics.html) :\n\n\\_ Les titres sont caractérisés par des `#` en fonction du niveau : `#Titre de niveau 1`, `##Titre de niveau 2`...\\\n\\_ La mise en forme du texte se fait avec les étoiles ou les impostrophes (apostrophe à l'envers) :\n\n-   Une étoile `*` avant et après la partie à valoriser permet de mettre en *italique* (codé `*italique*`)\\\n-   Deux `**` avant et après mettent en **gras** (codé `**gras**`)\\\n-   Trois `***` avant et après mettent en ***gras et italique*** (codé `***gras et italique***`)\\\n-   Un **double espace** permet de passer à la ligne. Il faut donc toujours mettre deux espaces à la fin de chaque ligne. Sans ces espaces, toutes les lignes sont collées les unes à la suite des autres\\\n-   Pour éditer un `format code` (sans qu'il se lance) pour présenter les packages, les fonctions ou les objets utilisés (comme fait dans ce document), il faut encadrer d'impostrophes\n\nDes images peuvent aussi être intégrées grâce à `![*légende_de_l_image*](adresse_de_l_image.format_de_l_image)`\n\n## Portion de code\n\nLe code est enregistré dans des chuncks délimités par trois impostrophes comme ci-dessous.\\\nLes paramètres du chunk sont précédés de `#|`.\\\nCela permet de donner un nom au chunck avec `#| label: nom_du_chunk` ou de choisir les sorties `#| echo: true` : le code est affiché dans le format de sortie, `#| warning: false` : les messages de type `warning` ne sont pas affichés...\\\nTouts les paramétrages peuvent se retrouver dans [le guide Quatro](https://quarto.org/docs/reference/cells/cells-knitr.html).\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: nom_du_chunk\n#| warning: false\n\n1 + 1\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n::: callout-waring\nSi un des impostrophes est supprimé par erreur, le code ne peut pas se lancer !\\\nIl faut toujours vérifier que les chunks soient bien fermés (fond d'une couleur différente).\n:::\n\n# Ajout d'une équation  \n  \nDans la ligne avec le symbole dollar `Soit on peut choisir de les intégrer dans le texte : $Y = aX + b$` ou dans un bloc à part grâce au double dollar `$$ Z = Y + zb $$`\n  \n![](img/equation.png)  \n\n# Ajout de référence bibliographiques  \n\n## Grâce à Zotero\n\nAssociation via Zotero Web grâce à une clé API : `Global Options > R Markdown > Citations`  \n  \nPlus d’info sur le [tuto de Claire Della Vedova](https://delladata.fr/quarto-citations-et-references-bibliographiques/)  \n\n## Grâce à une recherche\n\nDans l'onglet `Visual`, cliquer sur `Insert` puis `Citation`.  \nIl est possible de chercher directement via le [DOI](https://fr.wikipedia.org/wiki/Digital_Object_Identifier) ou dans [Crossref](https://www.crossref.org/), [DataCite](https://datacite.org/) ou [PubMed](https://pubmed.ncbi.nlm.nih.gov/).   \n  \n\n# Intégrer un graphique    \nIl y a deux possibilités pour générer un graphique :  \n\n- Le coder dans le document Quarto   \n- Le coder dans un autre document Quarto puis l'intégrer dans celui de l'article   \n  \nDans les deux cas, il faut faire le graphique dans un chunk en le nommant avec `label: fig-nom_du_graph`   \n  \n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-iris\n\nplot(iris)\n```\n````\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-iris-1.png){#fig-iris width=672}\n:::\n:::\n\n  \nSi le graphique est généré dans un autre document, il peut être intégré grâce à `{{< embed nom_du_doc.qmd#fig-nom_du_graph >}}` codé `{{< embed 01_graph_explo.qmd#fig-graph_iris >}}` dans la [vidéo sur Twitch](https://www.twitch.tv/videos/2408949837).  \n  \nPour ensuite faire un lien hypertexte vers un graphique, il suffit dans le texte de rajouter `@fig-nom_du_graph` codé `@fig-iris` dans la [vidéo](https://www.twitch.tv/videos/2408949837).  \n  ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}