{
  "hash": "660e8b990b3af6a7bacfdd2a0fdb881b",
  "result": {
    "markdown": "---\ntitle: \"Dernière exploration du `{tidyverse}` avec le package `{purrr}`\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2023/05/02\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, tidyverse]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](sous_pont.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 2 mai 2023**](https://www.twitch.tv/videos/1809466535).\n\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_tidyverse_purrr).\n:::\n\n\n\n\n\n# R-Ladies Paris\n\nR-Ladies Paris est une section locale de l'organisation mondiale R-Ladies Global qui promeut la diversité dans la communauté R et fournit un réseau de soutien convivial pour les passionnés du langage de programmation R dans le monde entier.\n\n::: {.callout-note icon=\"false\"}\nN'hésitez pas à joindre le [groupe sur Meetup](https://www.meetup.com/fr-FR/rladies-paris/) afin d'être informés de nouveaux meetups organisés.\n:::\n\n# Introduction\n\n::: {.callout-note icon=\"false\"}\nCette partie reprend la première partie des articles du 7 février et du 21 mars 2023 sur le `{tidyverse}`.\n:::\n\n## Historique\n\nLe `{tidyverse}` s'appelait encore le `hadleyverse` il y a quelques année, c'est-à-dire `l'univers de Hadley` pour [Hadley Wickham](https://hadley.nz/) son génial créateur.\\\nLe but de Hadley est de rendre l'analyse données plus facile, plus rapide et surtout **plus fun** et je trouve que cela transparaît dans ses packages !\\\nLe `{tidyverse}` c'est l'ensemble des packages open-source développé par Hadley et son équipe (Hadley travaille maintenant pour RStudio en plus de plusieurs universités) qui partagent la même philosophie, la même structure de données (le fameux format `tidy`) et la même syntaxe.\n\n## Le format `tidy`\n\nLe format `tidy`repose sur la répétition des lignes des individus afin de limiter le nombre de colonnes.\\\nDans le plus stricte cas, le format `tidy` ne présente que 3 colonnes :\n\n\\_ Identification de l'individu, *par exemple* : `nom_du_pays`, `num_bague_identification`,...\\\n\\_ Variables mesurées, *par exemple* : `variable` peut prendre comme modalités `superficie`, `taille_population`, `PIB` ou `masse`, `taille`, `longueur_du_bec`...\\\n\\_ Valeur de la mesure. **Attention**, le format `tidy` ne supporte par plusieurs type de données dans la même colonne !\n\n## La syntaxe `tidyverse`\n\nNon détaillée ici, je vous invite à consulter le [tidyverse style guide](https://style.tidyverse.org/index.html).\n\n## Les packages concernés\n\n\\_ [`ggplot2`](https://ggplot2.tidyverse.org/) : Visulisation des données\\\n\\_ [`dplyr`](https://dplyr.tidyverse.org/) : Manipulation des données (filtrer, trier,...) à ne pas confondre avec `tidyr` qui manipule le format du jeu de données. Présenté [le 7 février sur twitch](https://www.twitch.tv/videos/1730949759).\\\n\\_ [`tidyr`](https://tidyr.tidyverse.org/) : Modification du format du jeu de données pour en faire un jeu de donnée `tidy`. Présenté [le 7 février sur twitch](https://www.twitch.tv/videos/1730949759).\\\n\\_ [`readr`](https://readr.tidyverse.org/) : Lecture rapide de fichiers de données format `csv` et autres. **Attention** : format `xslx` non pris en charge, il faut utiliser le package [`readxl`](https://readxl.tidyverse.org/) qui fait partie du `tidyverse` au sens large mais qui n'est pas attaché par défaut quand on fait `library(tidyverse)`\\\n\\_ [`purrr`](https://purrr.tidyverse.org/) : Permet le remplacement d'un grand nombre de boucles *Vu aujourd'hui*\\\n\\_ [`tibble`](https://tibble.tidyverse.org/) : Format des données `tidy`\\\n\\_ [`stringr`](https://stringr.tidyverse.org/) : Manipulation des chaînes de caractères. Présenté [le 21 mars sur twitch](https://www.twitch.tv/videos/1774056539).\\\n\\_ [`forcats`](https://forcats.tidyverse.org/) : Manipulation des variables facteurs `factors`. Présenté [le 21 mars sur twitch](https://www.twitch.tv/videos/1774056539).\\\n\\_ [`lubrdate`](https://lubridate.tidyverse.org/) : Manipulation des dates. *Nouveau dans le `{tidyverse}`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# `{purrr}`\n\n## La différence avec les boucles\n\n::: {.callout-note icon=\"false\"}\nL'intération c'est la répétition d'une action.\n:::\n\nElle peut-être réalisée avec une boucle `for()`, `if()` ou `while()` ou en utilisant la vectorisation.\\\nLors d'une boucle, les vérifications sont faites à chaque itération ce qui peut beaucoup augmenter le temps de calcul.\\\nIl est aussi nécessaire d'initié l'objet contrairement à l'utilisation des vecteurs.\n\n*Exemple : création d'un objet contenant les doubles de 1 à 10*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobjet <- 2\n\nfor (i in (2:10)){\n  objet[i] <- i*2\n}\n```\n:::\n\n\nLe même objet peut être créé avec la vectorisation qui est la base dans `R`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvecteur <- (1:10)*2\nidentical(objet, vecteur)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Premier exemple d'utilisation de `{purrr}` avec du texte\n\nUtilisation du début du livre, [Les mémoires d'Hadrien de Marguerite Yourcenar](http://pierre-lamble2.eu/resources/Yourcenar%20Hadrien.pdf).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhadrien <- \"Je suis descendu ce matin chez mon médecin Hermogène, qui vient de rentrer à la Villa après un assez long voyage en Asie. L'examen devait se faire à jeun : nous avions pris rendez-vous pour les premières heures de la matinée. Je me suis couché sur un lit après m'être dépouillé de mon manteau et de ma tunique. Je t'épargne des détails qui te seraient aussi désagréables qu'à moimême, et la description du corps d'un homme qui avance en âge et s'apprête à mourir d'une hydropisie du cœur.\"\n\n# séparer les phrases\nparagraphe <- str_split(hadrien, \"\\\\.\")\n# afficher la longueur\nstr_length(paragraphe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 506\n```\n:::\n\n```{.r .cell-code}\n# totale\nmap(.x = paragraphe, .f = ~ str_length(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 120 103  84 177   0\n```\n:::\n\n```{.r .cell-code}\n# beaucoup de fonctions sont prévue pour la vectorisation et peuvent foncitonner sans mapping\nhadrien %>% \n  str_split(\"\\\\.\", simplify = TRUE) %>% \n  str_length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120 103  84 177   0\n```\n:::\n\n```{.r .cell-code}\n# détacher par phrases et par mots\nstr_split(hadrien, \" \", simplify = TRUE) %>% length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 88\n```\n:::\n\n```{.r .cell-code}\nstr_split(paragraphe, \" \", simplify = TRUE) %>% length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 92\n```\n:::\n\n```{.r .cell-code}\nstr_split(paragraphe, \" \", simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]     [,2]   [,3]       [,4] [,5]    [,6]   [,7]  [,8]     \n[1,] \"c(\\\"Je\" \"suis\" \"descendu\" \"ce\" \"matin\" \"chez\" \"mon\" \"médecin\"\n     [,9]         [,10] [,11]   [,12] [,13]     [,14] [,15] [,16]   [,17]  \n[1,] \"Hermogène,\" \"qui\" \"vient\" \"de\"  \"rentrer\" \"à\"   \"la\"  \"Villa\" \"après\"\n     [,18] [,19]   [,20]  [,21]    [,22] [,23]     [,24] [,25]      [,26]   \n[1,] \"un\"  \"assez\" \"long\" \"voyage\" \"en\"  \"Asie\\\",\" \"\\\"\"  \"L'examen\" \"devait\"\n     [,27] [,28]   [,29] [,30]  [,31] [,32]  [,33]    [,34]  [,35]        \n[1,] \"se\"  \"faire\" \"à\"   \"jeun\" \":\"   \"nous\" \"avions\" \"pris\" \"rendez-vous\"\n     [,36]  [,37] [,38]       [,39]    [,40] [,41] [,42]        [,43] [,44]\n[1,] \"pour\" \"les\" \"premières\" \"heures\" \"de\"  \"la\"  \"matinée\\\",\" \"\\\"\"  \"Je\" \n     [,45] [,46]  [,47]    [,48] [,49] [,50] [,51]   [,52]    [,53]       [,54]\n[1,] \"me\"  \"suis\" \"couché\" \"sur\" \"un\"  \"lit\" \"après\" \"m'être\" \"dépouillé\" \"de\" \n     [,55] [,56]     [,57] [,58] [,59] [,60]        [,61] [,62] [,63]      \n[1,] \"mon\" \"manteau\" \"et\"  \"de\"  \"ma\"  \"tunique\\\",\" \"\\\"\"  \"Je\"  \"t'épargne\"\n     [,64] [,65]     [,66] [,67] [,68]      [,69]   [,70]          [,71] \n[1,] \"des\" \"détails\" \"qui\" \"te\"  \"seraient\" \"aussi\" \"désagréables\" \"qu'à\"\n     [,72]      [,73] [,74] [,75]         [,76] [,77]   [,78]  [,79]   [,80]\n[1,] \"moimême,\" \"et\"  \"la\"  \"description\" \"du\"  \"corps\" \"d'un\" \"homme\" \"qui\"\n     [,81]    [,82] [,83] [,84] [,85]       [,86] [,87]    [,88]   [,89]       \n[1,] \"avance\" \"en\"  \"âge\" \"et\"  \"s'apprête\" \"à\"   \"mourir\" \"d'une\" \"hydropisie\"\n     [,90] [,91]     [,92]    \n[1,] \"du\"  \"cœur\\\",\" \"\\n\\\"\\\")\"\n```\n:::\n\n```{.r .cell-code}\n# changer de profondeur dans l'objet grâce à `_depth`\nmap(\n  .x = paragraphe,\n  .f = ~ str_split(.x, \" \")\n) %>% \n  map_depth(2, length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]][[1]]\n[1] 23\n\n[[1]][[2]]\n[1] 19\n\n[[1]][[3]]\n[1] 18\n\n[[1]][[4]]\n[1] 31\n\n[[1]][[5]]\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# utilisation de `map2()` lorsque deux listes sont intégrée et `pmap()` lorsqu'il y a plus de deux listes\nmap2_chr(\n  .x = c(\"Alice\", \"Marc\", \"Julie\", \"Charlie\"),\n  .y = c(\"plage\", \"montagne\", \"campagne\", \"cuisine\"),\n  .f = ~ str_c(.x, \" va à la \", .y)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alice va à la plage\"     \"Marc va à la montagne\"  \n[3] \"Julie va à la campagne\"  \"Charlie va à la cuisine\"\n```\n:::\n\n```{.r .cell-code}\n# type d'objet produit par map -> une liste par défaut\nmap2(\n  .x = c(\"Alice\", \"Marc\", \"Julie\", \"Charlie\"),\n  .y = c(\"plage\", \"montagne\", \"campagne\", \"cuisine\"),\n  ~ str_c(.x, \" va à la \", .y)\n) %>% \n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\n# possibilité de changer le type de sortie avec _chr ou _dbl...\nmap2_chr(\n  .x = c(\"Alice\", \"Marc\", \"Julie\", \"Charlie\"),\n  .y = c(\"plage\", \"montagne\", \"campagne\", \"cuisine\"),\n  ~ str_c(.x, \" va à la \", .y)\n) %>% \n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nmap2_chr(\n  .x = c(\"Alice\", \"Marc\", \"Julie\", \"Charlie\"),\n  .y = c(\"plage\", \"montagne\", \"campagne\", \"cuisine\"),\n  ~ str_c(.x, \" va à la \", .y)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alice va à la plage\"     \"Marc va à la montagne\"  \n[3] \"Julie va à la campagne\"  \"Charlie va à la cuisine\"\n```\n:::\n:::\n\n\n## Deuxième exemple avec une fonction sur des jdd\n\nCommençons par voir la fonction `across()` du package `{dplyr}` qui permet d'applique une ou plusieurs fonctions sur des colonnes multiples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calcul des moyennes de sepal_length\niris %>% \n  summarise(sepal_length_moyenne = mean(Sepal.Length))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sepal_length_moyenne\n1             5.843333\n```\n:::\n\n```{.r .cell-code}\n# application à toutes les colonnes numériques\niris %>% \n  summarise(\n    across(\n      .cols = where(is.numeric),\n      .fns = list(moyenne = ~ mean(.x, na.rm = TRUE), minimum = min, maximum = max),\n      .names = \"{col}_{fn}\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length_moyenne Sepal.Length_minimum Sepal.Length_maximum\n1             5.843333                  4.3                  7.9\n  Sepal.Width_moyenne Sepal.Width_minimum Sepal.Width_maximum\n1            3.057333                   2                 4.4\n  Petal.Length_moyenne Petal.Length_minimum Petal.Length_maximum\n1                3.758                    1                  6.9\n  Petal.Width_moyenne Petal.Width_minimum Petal.Width_maximum\n1            1.199333                 0.1                 2.5\n```\n:::\n:::\n\n\nRéalisation sur différentes tables de données grâce à la fonction `map()` de `{purrr}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# travail sur les jdd de données iris, mtcars et women\nmap(\n  .x = list(iris, mtcars, women),\n  .f = ~ summarise(\n    .x,\n    across(\n      .cols = where(is.numeric),\n      .fns = list(moyenne = ~ mean(.x, na.rm = TRUE), minimum = min, maximum = max),\n      .names = \"{col}_{fn}\"\n    )\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n  Sepal.Length_moyenne Sepal.Length_minimum Sepal.Length_maximum\n1             5.843333                  4.3                  7.9\n  Sepal.Width_moyenne Sepal.Width_minimum Sepal.Width_maximum\n1            3.057333                   2                 4.4\n  Petal.Length_moyenne Petal.Length_minimum Petal.Length_maximum\n1                3.758                    1                  6.9\n  Petal.Width_moyenne Petal.Width_minimum Petal.Width_maximum\n1            1.199333                 0.1                 2.5\n\n[[2]]\n  mpg_moyenne mpg_minimum mpg_maximum cyl_moyenne cyl_minimum cyl_maximum\n1    20.09062        10.4        33.9      6.1875           4           8\n  disp_moyenne disp_minimum disp_maximum hp_moyenne hp_minimum hp_maximum\n1     230.7219         71.1          472   146.6875         52        335\n  drat_moyenne drat_minimum drat_maximum wt_moyenne wt_minimum wt_maximum\n1     3.596563         2.76         4.93    3.21725      1.513      5.424\n  qsec_moyenne qsec_minimum qsec_maximum vs_moyenne vs_minimum vs_maximum\n1     17.84875         14.5         22.9     0.4375          0          1\n  am_moyenne am_minimum am_maximum gear_moyenne gear_minimum gear_maximum\n1    0.40625          0          1       3.6875            3            5\n  carb_moyenne carb_minimum carb_maximum\n1       2.8125            1            8\n\n[[3]]\n  height_moyenne height_minimum height_maximum weight_moyenne weight_minimum\n1             65             58             72       136.7333            115\n  weight_maximum\n1            164\n```\n:::\n\n```{.r .cell-code}\n# ajout des noms des jeux de données\nmap(\n  .x = list(iris, mtcars, women),\n  .f = ~ summarise(\n    .x,\n    across(\n      .cols = where(is.numeric),\n      .fns = list(moyenne = ~ mean(.x, na.rm = TRUE), minimum = min, maximum = max),\n      .names = \"{col}_{fn}\"\n    )\n  )\n) %>% \n  set_names(c(\"iris\", \"mtcars\", \"women\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$iris\n  Sepal.Length_moyenne Sepal.Length_minimum Sepal.Length_maximum\n1             5.843333                  4.3                  7.9\n  Sepal.Width_moyenne Sepal.Width_minimum Sepal.Width_maximum\n1            3.057333                   2                 4.4\n  Petal.Length_moyenne Petal.Length_minimum Petal.Length_maximum\n1                3.758                    1                  6.9\n  Petal.Width_moyenne Petal.Width_minimum Petal.Width_maximum\n1            1.199333                 0.1                 2.5\n\n$mtcars\n  mpg_moyenne mpg_minimum mpg_maximum cyl_moyenne cyl_minimum cyl_maximum\n1    20.09062        10.4        33.9      6.1875           4           8\n  disp_moyenne disp_minimum disp_maximum hp_moyenne hp_minimum hp_maximum\n1     230.7219         71.1          472   146.6875         52        335\n  drat_moyenne drat_minimum drat_maximum wt_moyenne wt_minimum wt_maximum\n1     3.596563         2.76         4.93    3.21725      1.513      5.424\n  qsec_moyenne qsec_minimum qsec_maximum vs_moyenne vs_minimum vs_maximum\n1     17.84875         14.5         22.9     0.4375          0          1\n  am_moyenne am_minimum am_maximum gear_moyenne gear_minimum gear_maximum\n1    0.40625          0          1       3.6875            3            5\n  carb_moyenne carb_minimum carb_maximum\n1       2.8125            1            8\n\n$women\n  height_moyenne height_minimum height_maximum weight_moyenne weight_minimum\n1             65             58             72       136.7333            115\n  weight_maximum\n1            164\n```\n:::\n\n```{.r .cell-code}\n# format tableau croisé\nmap(\n  .x = list(iris, mtcars, women),\n  .f = ~ summarise(\n    .x,\n    across(\n      .cols = where(is.numeric),\n      .fns = list(moyenne = ~ mean(.x, na.rm = TRUE), minimum = min, maximum = max),\n      .names = \"{col}_{fn}\"\n    )\n  )\n) %>% \n  set_names(c(\"iris\", \"mtcars\", \"women\")) %>% \n  map(\n    .f = ~ pivot_longer(\n      .x, \n      cols = everything(),\n      names_to = c(\"mesure\", \".value\"),\n      names_pattern = \"(.+)_(.+)\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$iris\n# A tibble: 4 × 4\n  mesure       moyenne minimum maximum\n  <chr>          <dbl>   <dbl>   <dbl>\n1 Sepal.Length    5.84     4.3     7.9\n2 Sepal.Width     3.06     2       4.4\n3 Petal.Length    3.76     1       6.9\n4 Petal.Width     1.20     0.1     2.5\n\n$mtcars\n# A tibble: 11 × 4\n   mesure moyenne minimum maximum\n   <chr>    <dbl>   <dbl>   <dbl>\n 1 mpg     20.1     10.4    33.9 \n 2 cyl      6.19     4       8   \n 3 disp   231.      71.1   472   \n 4 hp     147.      52     335   \n 5 drat     3.60     2.76    4.93\n 6 wt       3.22     1.51    5.42\n 7 qsec    17.8     14.5    22.9 \n 8 vs       0.438    0       1   \n 9 am       0.406    0       1   \n10 gear     3.69     3       5   \n11 carb     2.81     1       8   \n\n$women\n# A tibble: 2 × 4\n  mesure moyenne minimum maximum\n  <chr>    <dbl>   <dbl>   <dbl>\n1 height     65       58      72\n2 weight    137.     115     164\n```\n:::\n:::\n\n\n## Troisième exemple avec le traitement de colonnes d'un même jdd\n\n*Exemple : avec les données `{ascombes}`*\\\nC'est un jeu de données de \"4\" groupes pour lesquelles les propriétés statistiques simple (moyennes, variance, corrélation, régression linéaire) sont similaire alors que les données sont très différentes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanscombe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   x1 x2 x3 x4    y1   y2    y3    y4\n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89\n```\n:::\n\n```{.r .cell-code}\n# réalisation d'une régression linéaire\n## simple\nlm(y1 ~ x1, data = anscombe) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,\tAdjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n```\n:::\n\n```{.r .cell-code}\n## sur toutes les colonnes\nmap2(\n  .x = c(\"x1\", \"x2\", \"x3\", \"x4\"),\n  .y = c(\"y1\", \"y2\", \"y3\", \"y4\"),\n  .f = ~ lm(get(.y) ~ get(.x), data = anscombe) %>% summary()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nget(.x)       0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,\tAdjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\n\n[[2]]\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nget(.x)        0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\n\n[[3]]\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nget(.x)       0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\n\n[[4]]\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nget(.x)       0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,\tAdjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n```\n:::\n\n```{.r .cell-code}\n## avec l'utilisation de la fonction glue\nlibrary(glue)\nlibrary(glue)\nglue(\"x{1:4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx1\nx2\nx3\nx4\n```\n:::\n\n```{.r .cell-code}\n## utilisation de set_names() pour le nom des jdd\nmap2(\n  .x = c(glue(\"x{1:4}\")),\n  .y = c(glue(\"y{1:4}\")),\n  .f = ~ lm(get(.y) ~ get(.x), data = anscombe) %>% summary()\n  ) %>% \n  set_names(glue(\"colonnes finissants par {1:4}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`colonnes finissants par 1`\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nget(.x)       0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,\tAdjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\n\n$`colonnes finissants par 2`\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nget(.x)        0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\n\n$`colonnes finissants par 3`\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nget(.x)       0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\n\n$`colonnes finissants par 4`\n\nCall:\nlm(formula = get(.y) ~ get(.x), data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nget(.x)       0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,\tAdjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n```\n:::\n\n```{.r .cell-code}\n# vérification grâce à un graphique\nggplot(anscombe) +\n  aes(x = x1, y = y1) +\n  geom_point() +\n  geom_abline(slope = 0.5, intercept = 3, color = \"blue\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## sur toutes les colonnes\npurrr::map2(\n  .x = c(glue(\"x{1:4}\")),\n  .y = c(glue(\"y{1:4}\")),\n  .f = ~ ggplot(anscombe) +\n    aes(x = get(.x), y = get(.y)) +\n    geom_point() +\n    geom_abline(slope = 0.5, intercept = 3, color = \"blue\") +\n    theme_classic()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[2]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[3]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[4]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-5.png){width=672}\n:::\n\n```{.r .cell-code}\n## modification des noms des axes\npurrr::map2(\n  .x = c(glue(\"x{1:4}\")),\n  .y = c(glue(\"y{1:4}\")),\n  .f = ~ ggplot(anscombe) +\n    aes(x = get(.x), y = get(.y)) +\n    geom_point() +\n    geom_abline(slope = 0.5, intercept = 3, color = \"blue\") +\n    labs(x = .x, y = .y) +\n    theme_classic()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-6.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[2]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-7.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[3]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-8.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[4]]\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/map_anscombe-9.png){width=672}\n:::\n\n```{.r .cell-code}\n## enregistrement automatique des graphiques générés \npurrr::map2(\n  .x = c(glue(\"x{1:4}\")),\n  .y = c(glue(\"y{1:4}\")),\n  .f = ~ ggplot(anscombe) +\n    aes(x = get(.x), y = get(.y)) +\n    geom_point() +\n    geom_abline(slope = 0.5, intercept = 3, color = \"blue\") +\n    labs(x = .x, y = .y) +\n    theme_classic()\n) %>% \n  purrr::map2(\n    .y = c(glue(\"img/x{1:4}y{1:4}.png\")),\n    .f = ~ ggsave(plot = .x, filename = .y, width = 2, height = 2)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"img/x1y1.png\"\n\n[[2]]\n[1] \"img/x2y2.png\"\n\n[[3]]\n[1] \"img/x3y3.png\"\n\n[[4]]\n[1] \"img/x4y4.png\"\n```\n:::\n:::\n\n\n## Ressources intéressantes\n\n\\_ [le cheatsheet de `{purrr}`](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf)\\\n\\_ [la vignette de `{purrr}`](https://forcats.tidyverse.org/articles/forcats.html)\\\n\\_ [La page d'itération dans l'e-book R for Data Science](https://r4ds.had.co.nz/iteration.html)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}