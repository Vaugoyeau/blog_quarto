{
  "hash": "931e25e448707616d573156c1c3b88d8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploiter `{janitor}` pour nettoyer les donnÃ©es\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2024/11/12\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, nettoyage de donnÃ©es]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](demoiselle.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 12 novembre 2024**](https://www.twitch.tv/videos/2300000755).\\\n\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_janitor).\n:::\n\n# `{janitor}`  \n[![](https://sfirke.github.io/janitor/reference/figures/logo_small.png)](https://sfirke.github.io/janitor/)  \n  \n\nLe but de `{janitor}` est de proposer des [fonctions simples](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html) qui permettent de nettoyer des donnÃ©es brutes qui sont bof cÃ´tÃ© structure :  \n  \n- doublons de lignes  \n- des colonnes vides  \n- des noms de colonnes rÃ©pÃ©tÃ©s, non homogÃ¨ne ou mÃªme absent  \n  \nAssociÃ© Ã  ces fonctions de nettoyage, il y a [`tabyls`](https://sfirke.github.io/janitor/articles/tabyls.html) qui permet de visualiser les donnÃ©es sous la forme de tableaux rÃ©sumÃ©s.  \n  \n# Import des packages   \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.1     âœ” tibble    3.2.1\nâœ” lubridate 1.9.3     âœ” tidyr     1.3.1\nâœ” purrr     1.0.2     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttachement du package : 'janitor'\n\nLes objets suivants sont masquÃ©s depuis 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n:::\n\n\n::: callout-warning\n## Attention aux conflits  \n\nLe chargement des deux packages Ã  masquer 4 fonctions du package `{stats}`.  \n:::  \n  \n# Import des donnÃ©es   \nLes [donnÃ©es](https://github.com/Vaugoyeau/twitch_janitor/blob/master/data/donnees.xlsx) ont Ã©tÃ© crÃ©Ã©es pour l'occasion et sont disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_janitor).  \n  \nJ'ai choisi de ne pas utilisÃ© les donnÃ©es crÃ©Ã©es par [Sam Firke](https://github.com/sfirke/janitor/blob/main/dirty_data.xlsx) afin de changer mais n'hÃ©sites pas Ã  aller voir [ses exemples](https://github.com/sfirke/janitor) !  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- readxl::read_xlsx(\"data/donnees.xlsx\")\n```\n:::\n\n  \n# Regardons un peu les donnÃ©es   \n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 22\nColumns: 8\n$ `PrÃ©nom Patient.e` <chr> \"Paula\", \"Pierre\", \"Antoine\", \"Adrien\", \"Alice\", \"Sâ€¦\n$ `Sexe / genre`     <chr> \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"F\", \"â€¦\n$ date               <chr> \"2024-01-01\", \"2024-01-16\", \"2024-01-31\", \"2024-02-â€¦\n$ `Album in\\r\\ng/dL` <dbl> 3.6, 3.9, 3.6, 3.9, 4.1, 3.8, 3.7, 3.7, 3.7, 3.4, 3â€¦\n$ `Fructose mg/dL`   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,â€¦\n$ `Glucose mg/dL`    <dbl> 92.85714, 89.14286, 89.88571, 85.42857, 96.57143, 8â€¦\n$ `Na (mmol/L)`      <dbl> 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 1â€¦\n$ `Globulin g/dL`    <dbl> 2.3, 2.0, 2.0, 2.0, 1.9, 2.0, 2.2, 2.1, 2.1, 2.6, 2â€¦\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n PrÃ©nom Patient.e   Sexe / genre           date            Album in\\r\\ng/dL\n Length:22          Length:22          Length:22          Min.   :3.400    \n Class :character   Class :character   Class :character   1st Qu.:3.700    \n Mode  :character   Mode  :character   Mode  :character   Median :3.800    \n                                                          Mean   :3.809    \n                                                          3rd Qu.:3.900    \n                                                          Max.   :4.200    \n Fructose mg/dL Glucose mg/dL    Na (mmol/L)  Globulin g/dL  \n Mode:logical   Min.   :81.71   Min.   :150   Min.   :1.900  \n NA's:22        1st Qu.:84.87   1st Qu.:150   1st Qu.:2.000  \n                Median :86.91   Median :150   Median :2.100  \n                Mean   :87.39   Mean   :150   Mean   :2.109  \n                3rd Qu.:89.70   3rd Qu.:150   3rd Qu.:2.175  \n                Max.   :96.57   Max.   :150   Max.   :2.600  \n```\n\n\n:::\n:::\n\n\nComme tu le vois peut-Ãªtre les noms des colonnes ne sont pas terribles (prÃ©sence d'un saut de ligne `\\r`, prÃ©sence de parenthÃ¨ses, majuscules...).  \nIl y a aussi des dates mal traduites dans la colonne `date` et une colonne vide ðŸ˜¬  \n  \n  \n# AmÃ©liorer les noms des colonnes  \nL'uniformisation des noms est facile grÃ¢ce Ã  la fonction `clean_names()`.  \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- data |> \n  clean_names())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 8\n   prenom_patient_e sexe_genre date       album_in_g_d_l fructose_mg_d_l\n   <chr>            <chr>      <chr>               <dbl> <lgl>          \n 1 Paula            F          2024-01-01            3.6 NA             \n 2 Pierre           M          2024-01-16            3.9 NA             \n 3 Antoine          M          2024-01-31            3.6 NA             \n 4 Adrien           M          2024-02-15            3.9 NA             \n 5 Alice            F          2024-03-01            4.1 NA             \n 6 Sarah            F          45398                 3.8 NA             \n 7 Louis            M          45393                 3.7 NA             \n 8 Sophie           F          45307                 3.7 NA             \n 9 Martin           M          2024-02-16            3.7 NA             \n10 MalmÃ¶            F          2024-03-02            3.4 NA             \n# â„¹ 12 more rows\n# â„¹ 3 more variables: glucose_mg_d_l <dbl>, na_mmol_l <dbl>,\n#   globulin_g_d_l <dbl>\n```\n\n\n:::\n:::\n\n  \n![](img/format_nom.png) [Artwork by @allison_horst](https://allisonhorst.com/)  \nIl est possible de choisir le format de colonne comme le `BigCamel`, `lowerCamel`, `SCREAMING_SNAKE` et d'autre.   \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- readxl::read_xlsx(\"data/donnees.xlsx\") |> \n  clean_names(case = \"lower_camel\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 8\n   prenomPatientE sexeGenre date     albumInGDL fructoseMgDL glucoseMgDL naMmolL\n   <chr>          <chr>     <chr>         <dbl> <lgl>              <dbl>   <dbl>\n 1 Paula          F         2024-01â€¦        3.6 NA                  92.9     150\n 2 Pierre         M         2024-01â€¦        3.9 NA                  89.1     150\n 3 Antoine        M         2024-01â€¦        3.6 NA                  89.9     150\n 4 Adrien         M         2024-02â€¦        3.9 NA                  85.4     150\n 5 Alice          F         2024-03â€¦        4.1 NA                  96.6     150\n 6 Sarah          F         45398           3.8 NA                  83.9     150\n 7 Louis          M         45393           3.7 NA                  89.9     150\n 8 Sophie         F         45307           3.7 NA                  83.9     150\n 9 Martin         M         2024-02â€¦        3.7 NA                  86.9     150\n10 MalmÃ¶          F         2024-03â€¦        3.4 NA                  83.2     150\n# â„¹ 12 more rows\n# â„¹ 1 more variable: globulinGDL <dbl>\n```\n\n\n:::\n:::\n\n  \nJe vais conserver la forme par dÃ©faut qui est le `snake_case` que j'utilise d'habitude.  \nLa fonction `make_clean_name()` permet la mÃªme chose mais sur un vecteur de nom. Ici, appliquÃ© sur la colonne `prenom_patient_e` elle me permet d'uniformiser les prÃ©noms en retirant les accents, les majuscules, les tirets...  \n   \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- readxl::read_xlsx(\"data/donnees.xlsx\") |> \n  clean_names() |> \n  mutate(\n    prenom_patient_e = \n      prenom_patient_e |> \n      make_clean_names()\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 8\n   prenom_patient_e sexe_genre date       album_in_g_d_l fructose_mg_d_l\n   <chr>            <chr>      <chr>               <dbl> <lgl>          \n 1 paula            F          2024-01-01            3.6 NA             \n 2 pierre           M          2024-01-16            3.9 NA             \n 3 antoine          M          2024-01-31            3.6 NA             \n 4 adrien           M          2024-02-15            3.9 NA             \n 5 alice            F          2024-03-01            4.1 NA             \n 6 sarah            F          45398                 3.8 NA             \n 7 louis            M          45393                 3.7 NA             \n 8 sophie           F          45307                 3.7 NA             \n 9 martin           M          2024-02-16            3.7 NA             \n10 malmo            F          2024-03-02            3.4 NA             \n# â„¹ 12 more rows\n# â„¹ 3 more variables: glucose_mg_d_l <dbl>, na_mmol_l <dbl>,\n#   globulin_g_d_l <dbl>\n```\n\n\n:::\n:::\n\n\n# Retirer les colonnes vides  \nLa fonction `remove_empty()` permet de retirer les lignes et/ou les colonnes vides.  \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- readxl::read_xlsx(\"data/donnees.xlsx\") |> \n  clean_names() |> \n  mutate(\n    prenom_patient_e = make_clean_names(prenom_patient_e)\n  ) |> \n  remove_empty())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nvalue for \"which\" not specified, defaulting to c(\"rows\", \"cols\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 7\n   prenom_patient_e sexe_genre date      album_in_g_d_l glucose_mg_d_l na_mmol_l\n   <chr>            <chr>      <chr>              <dbl>          <dbl>     <dbl>\n 1 paula            F          2024-01-â€¦            3.6           92.9       150\n 2 pierre           M          2024-01-â€¦            3.9           89.1       150\n 3 antoine          M          2024-01-â€¦            3.6           89.9       150\n 4 adrien           M          2024-02-â€¦            3.9           85.4       150\n 5 alice            F          2024-03-â€¦            4.1           96.6       150\n 6 sarah            F          45398                3.8           83.9       150\n 7 louis            M          45393                3.7           89.9       150\n 8 sophie           F          45307                3.7           83.9       150\n 9 martin           M          2024-02-â€¦            3.7           86.9       150\n10 malmo            F          2024-03-â€¦            3.4           83.2       150\n# â„¹ 12 more rows\n# â„¹ 1 more variable: globulin_g_d_l <dbl>\n```\n\n\n:::\n:::\n\n\n::: callout-note  \nL'argument `which` par dÃ©faut est `c(\"rows\", \"cols\")`. C'est cet argument qui permet de choisir de supprimer les lignes et/ou les colonnes vides.  \n:::  \n  \nUne fonction associÃ©e est `remove_constant()` qui retire les **colonnes constantes** (donc les colonnes vides aussi).    \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- readxl::read_xlsx(\"data/donnees.xlsx\") |> \n  clean_names() |> \n  mutate(\n    prenom_patient_e = \n      prenom_patient_e |> \n      make_clean_names()\n  ) |> \n  remove_constant())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 6\n   prenom_patient_e sexe_genre date       album_in_g_d_l glucose_mg_d_l\n   <chr>            <chr>      <chr>               <dbl>          <dbl>\n 1 paula            F          2024-01-01            3.6           92.9\n 2 pierre           M          2024-01-16            3.9           89.1\n 3 antoine          M          2024-01-31            3.6           89.9\n 4 adrien           M          2024-02-15            3.9           85.4\n 5 alice            F          2024-03-01            4.1           96.6\n 6 sarah            F          45398                 3.8           83.9\n 7 louis            M          45393                 3.7           89.9\n 8 sophie           F          45307                 3.7           83.9\n 9 martin           M          2024-02-16            3.7           86.9\n10 malmo            F          2024-03-02            3.4           83.2\n# â„¹ 12 more rows\n# â„¹ 1 more variable: globulin_g_d_l <dbl>\n```\n\n\n:::\n:::\n\n   \n\n# Traiter les dates excel  \n[Lors du live](https://www.twitch.tv/videos/2300000755), je t'ai montrÃ© les diffÃ©rentes Ã©tapes pour arriver au code ci-dessous qui permet de remplacer les dates format Excel (comme `45398` par exemple) sous un format date `yyyy-mm-dd`.  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n(donnees <- readxl::read_xlsx(\"data/donnees.xlsx\") |> \n  clean_names() |> \n  mutate(\n    prenom_patient_e = \n      prenom_patient_e |> \n      make_clean_names()\n  ) |> \n  remove_constant() |> \n  mutate(\n    date = \n      case_when(\n        str_detect(date, \"-\") ~ date,\n        TRUE ~ date |> \n          as.numeric() |> \n          excel_numeric_to_date() |> \n          as.character()\n      ) |> \n      ymd()\n  ))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nâ„¹ In argument: `date = ymd(case_when(str_detect(date, \"-\") ~ date, TRUE ~\n  as.character(excel_numeric_to_date(as.numeric(date)))))`.\nCaused by warning in `excel_numeric_to_date()`:\n! NAs introduits lors de la conversion automatique\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 Ã— 6\n   prenom_patient_e sexe_genre date       album_in_g_d_l glucose_mg_d_l\n   <chr>            <chr>      <date>              <dbl>          <dbl>\n 1 paula            F          2024-01-01            3.6           92.9\n 2 pierre           M          2024-01-16            3.9           89.1\n 3 antoine          M          2024-01-31            3.6           89.9\n 4 adrien           M          2024-02-15            3.9           85.4\n 5 alice            F          2024-03-01            4.1           96.6\n 6 sarah            F          2024-04-16            3.8           83.9\n 7 louis            M          2024-04-11            3.7           89.9\n 8 sophie           F          2024-01-16            3.7           83.9\n 9 martin           M          2024-02-16            3.7           86.9\n10 malmo            F          2024-03-02            3.4           83.2\n# â„¹ 12 more rows\n# â„¹ 1 more variable: globulin_g_d_l <dbl>\n```\n\n\n:::\n:::\n\n  \n# CrÃ©er des tableaux rÃ©sumÃ©s rapidement  \nEn plus de bien nettoyer les donnÃ©es, le package [`{janitor}`](https://sfirke.github.io/janitor/articles/tabyls.html) permet de rÃ©aliser rapidement et simplement des tableaux rÃ©sumÃ©s avec des analyses de donnÃ©es.  \n\nLa premiÃ¨re fonction Ã  utiliser est `tabyl()`, une fonction un peu similaire Ã  `count()` de `{dplyr}`.  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       date n    percent\n 2024-01-01 1 0.04545455\n 2024-01-10 1 0.04545455\n 2024-01-12 1 0.04545455\n 2024-01-13 1 0.04545455\n 2024-01-15 1 0.04545455\n 2024-01-16 3 0.13636364\n 2024-01-18 1 0.04545455\n 2024-01-19 2 0.09090909\n 2024-01-31 1 0.04545455\n 2024-02-15 1 0.04545455\n 2024-02-16 1 0.04545455\n 2024-02-17 1 0.04545455\n 2024-02-18 1 0.04545455\n 2024-03-01 1 0.04545455\n 2024-03-02 1 0.04545455\n 2024-03-03 1 0.04545455\n 2024-03-04 1 0.04545455\n 2024-04-11 1 0.04545455\n 2024-04-16 1 0.04545455\n```\n\n\n:::\n:::\n\n\nAu contraire de `count()`, `tabyl()` gÃ©nÃ¨re des tableaux croisÃ©s sous le mÃªme format que `table()` du package `{base}`.  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, sexe_genre, date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n sexe_genre 2024-01-01 2024-01-10 2024-01-12 2024-01-13 2024-01-15 2024-01-16\n          F          1          0          0          0          1          2\n          M          0          1          1          1          0          1\n 2024-01-18 2024-01-19 2024-01-31 2024-02-15 2024-02-16 2024-02-17 2024-02-18\n          1          2          0          0          0          0          1\n          0          0          1          1          1          1          0\n 2024-03-01 2024-03-02 2024-03-03 2024-03-04 2024-04-11 2024-04-16\n          1          1          1          0          0          1\n          0          0          0          1          1          0\n```\n\n\n:::\n:::\n\n\nIl est possible d'ajouter d'un titre aux colonnes grÃ¢ce Ã  la fonction `adorn_title()`.  Toutes les fonctions commenÃ§ant par `adorn_` permettent de modifier le tableau gÃ©nÃ©rÃ©.  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, sexe_genre, date) |> \n  adorn_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  date                                                       \n sexe_genre 2024-01-01 2024-01-10 2024-01-12 2024-01-13 2024-01-15 2024-01-16\n          F          1          0          0          0          1          2\n          M          0          1          1          1          0          1\n                                                                             \n 2024-01-18 2024-01-19 2024-01-31 2024-02-15 2024-02-16 2024-02-17 2024-02-18\n          1          2          0          0          0          0          1\n          0          0          1          1          1          1          0\n                                                                  \n 2024-03-01 2024-03-02 2024-03-03 2024-03-04 2024-04-11 2024-04-16\n          1          1          1          0          0          1\n          0          0          0          1          1          0\n```\n\n\n:::\n:::\n\n\nLa fonction `adorn_totals()` permet par exemple d'ajouter une colonne total   \n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, sexe_genre, date) |> \n  adorn_title() |> \n  adorn_totals(where = c(\"row\", \"col\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in adorn_totals(adorn_title(tabyl(donnees, sexe_genre, date)), where = c(\"row\", : at least one targeted column must be of class numeric.  Control target variables with the ... argument. adorn_totals should be called before other adorn_ functions.\n```\n\n\n:::\n:::\n\n\n::: callout-warning\n## Attention  \n\nIl faut faire attention Ã  lâ€™ordre des lignes !  \n:::\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, sexe_genre, date) |> \n  adorn_totals(where = c(\"row\", \"col\")) |> \n  adorn_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  date                                                       \n sexe_genre 2024-01-01 2024-01-10 2024-01-12 2024-01-13 2024-01-15 2024-01-16\n          F          1          0          0          0          1          2\n          M          0          1          1          1          0          1\n      Total          1          1          1          1          1          3\n                                                                             \n 2024-01-18 2024-01-19 2024-01-31 2024-02-15 2024-02-16 2024-02-17 2024-02-18\n          1          2          0          0          0          0          1\n          0          0          1          1          1          1          0\n          1          2          1          1          1          1          1\n                                                                        \n 2024-03-01 2024-03-02 2024-03-03 2024-03-04 2024-04-11 2024-04-16 Total\n          1          1          1          0          0          1    12\n          0          0          0          1          1          0    10\n          1          1          1          1          1          1    22\n```\n\n\n:::\n:::\n\n\nEnfin les fonctions `adorn_percentages()` et `adorn_pct_formatting()` affichent les pourcentages pourcentages pour la premiÃ¨re et le nombre entre parenthÃ¨ses pour la deuxiÃ¨me.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabyl(donnees, date, sexe_genre) |> \n  adorn_totals(where = c(\"row\", \"col\")) |> \n  adorn_percentages() |> \n  adorn_pct_formatting(digits = 1) |> \n  adorn_ns() |> \n  adorn_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             sexe_genre                        \n       date           F           M       Total\n 2024-01-01 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-01-10   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-01-12   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-01-13   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-01-15 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-01-16  66.7%  (2)  33.3%  (1) 100.0%  (3)\n 2024-01-18 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-01-19 100.0%  (2)   0.0%  (0) 100.0%  (2)\n 2024-01-31   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-02-15   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-02-16   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-02-17   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-02-18 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-03-01 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-03-02 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-03-03 100.0%  (1)   0.0%  (0) 100.0%  (1)\n 2024-03-04   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-04-11   0.0%  (0) 100.0%  (1) 100.0%  (1)\n 2024-04-16 100.0%  (1)   0.0%  (0) 100.0%  (1)\n      Total  54.5% (12)  45.5% (10) 100.0% (22)\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}