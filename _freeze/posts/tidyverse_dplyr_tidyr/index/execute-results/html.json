{
  "hash": "4cf555a6bc39b1f3cd6b1fc98b686ce3",
  "result": {
    "markdown": "---\ntitle: \"Le `{tidyverse}` : `{dplyr}` et `{tidyr}`\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2023/02/07\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, tidyverse]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](train_machinery.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 7 février 2023 **](https://www.twitch.tv/videos/1730949759).\\\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_tidyverse_dplyr_tidyr).\n:::\n\n\n\n\n\n# Introduction\n\n## Historique\n\nLe `{tidyverse}` s'appelait encore le `hadleyverse` il y a quelques année, c'est-à-dire `l'univers de Hadley` pour [Hadley Wickham](https://hadley.nz/) son génial créateur.\\\nLe but de Hadley est de rendre l'analyse données plus facile, plus rapide et surtout **plus fun** et je trouve que cela transparaît dans ses packages !\\\nLe `{tidyverse}` c'est l'ensemble des packages open-source développé par Hadley et son équipe (Hadley travaille maintenant pour RStudio en plus de plusieurs universités) qui partagent la même philosophie, la même structure de données (le fameux format `tidy`) et la même syntaxe.\n\n## Le format `tidy`\n\nLe format `tidy`repose sur la répétition des lignes des individus afin de limiter le nombre de colonnes.\\\nDans le plus stricte cas, le format `tidy` ne présente que 3 colonnes :\n\n\\_ Identification de l'individu, *par exemple* : `nom_du_pays`, `num_bague_identification`,...\\\n\\_ Variables mesurées, *par exemple* : `variable` peut prendre comme modalités `superficie`, `taille_population`, `PIB` ou `masse`, `taille`, `longueur_du_bec`...\\\n\\_ Valeur de la mesure. **Attention**, le format `tidy` ne supporte par plusieurs type de données dans la même colonne !\n\n## La syntaxe `tidyverse`\n\nNon détaillée ici, je vous invite à consulter le [tidyverse style guide](https://style.tidyverse.org/index.html).\n\n## Les packages concernés\n\n\\_ [`ggplot2`](https://ggplot2.tidyverse.org/) : Visulisation des données\\\n\\_ [`dplyr`](https://dplyr.tidyverse.org/) : Manipulation des données (filtrer, trier,...) à ne pas confondre avec `tidyr` qui manipule le format du jeu de données\\\n\\_ [`tidyr`](https://tidyr.tidyverse.org/) : Modification du format du jeu de données pour en faire un jeu de donnée `tidy`\\\n\\_ [`readr`](https://readr.tidyverse.org/) : Lecture rapide de fichiers de données format `csv` et autres. **Attention** : format `xslx` non pris en charge, il faut utiliser le package [`readxl`](https://readxl.tidyverse.org/) qui fait partie du `tidyverse` au sens large mais qui n'est pas attaché par défaut quand on fait `library(tidyverse)`\\\n\\_ [`purrr`](https://purrr.tidyverse.org/) : Permet le remplacement d'un grand nombre de boucles\\\n\\_ [`tibble`](https://tibble.tidyverse.org/) : Format des données `tidy`\\\n\\_ [`stringr`](https://stringr.tidyverse.org/) : Manipulation des chaînes de caractères.\\\n\\_ [`forcats`](https://forcats.tidyverse.org/) : Manipulation des variables facteurs `factors`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# Projecteur sur :\n\n## `{dplyr}`\n\nLe package `{dplyr}` permet de manipuler les données, c'est-à-dire, les filtrer, sélectionner les colonnes d'intérêts ou autres...\\\n*Exercice : trouver pour chaque poussin le jour où il a pris le plus de masse à partir des données `ChickWeight` présente de base dans R*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualisation des données  \nhead(ChickWeight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  weight Time Chick Diet\n1     42    0     1    1\n2     51    2     1    1\n3     59    4     1    1\n4     64    6     1    1\n5     76    8     1    1\n6     93   10     1    1\n```\n:::\n\n```{.r .cell-code}\n# création de la colonne de différence de poids avec la fonction lag qui permet de prendre les valeurs d'une ligne au-dessus (possibilité de modifier ce paramètre)\nChickWeight %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 578 × 5\n   weight  Time Chick Diet  prise_poids\n    <dbl> <dbl> <ord> <fct>       <dbl>\n 1     42     0 1     1              NA\n 2     51     2 1     1               9\n 3     59     4 1     1               8\n 4     64     6 1     1               5\n 5     76     8 1     1              12\n 6     93    10 1     1              17\n 7    106    12 1     1              13\n 8    125    14 1     1              19\n 9    149    16 1     1              24\n10    171    18 1     1              22\n# ℹ 568 more rows\n```\n:::\n\n```{.r .cell-code}\n# trie avec la fonction arrange\n## sur toutes les lignes\nChickWeight %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  arrange(prise_poids) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 578 × 5\n   weight  Time Chick Diet  prise_poids\n    <dbl> <dbl> <ord> <fct>       <dbl>\n 1    125    20 8     1              -9\n 2    147    21 33    3              -9\n 3     66     8 24    2              -8\n 4    150    21 30    2              -7\n 5     90    12 9     1              -6\n 6    175    21 11    1              -6\n 7     51    10 16    1              -6\n 8    146    18 33    3              -5\n 9    220    21 36    3              -5\n10    205    21 47    4              -5\n# ℹ 568 more rows\n```\n:::\n\n```{.r .cell-code}\n## en prenant l'effet groupe\nChickWeight %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  arrange(prise_poids, .by_group = TRUE) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 578 × 5\n   weight  Time Chick Diet  prise_poids\n    <dbl> <dbl> <ord> <fct>       <dbl>\n 1     35     2 18    1              -4\n 2     39     0 18    1              NA\n 3     51    10 16    1              -6\n 4     51     6 16    1               2\n 5     54    12 16    1               3\n 6     45     2 16    1               4\n 7     49     4 16    1               4\n 8     57     8 16    1               6\n 9     41     0 16    1              NA\n10     67    12 15    1              -1\n# ℹ 568 more rows\n```\n:::\n\n```{.r .cell-code}\n# Élimination des poussins qui ne sont pas mesurés pendant toute l'expérience\nChickWeight %>% \n  count(\n    Chick\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Chick  n\n1     18  2\n2     16  7\n3     15  8\n4     13 12\n5      9 12\n6     20 12\n7     10 12\n8      8 11\n9     17 12\n10    19 12\n11     4 12\n12     6 12\n13    11 12\n14     3 12\n15     1 12\n16    12 12\n17     2 12\n18     5 12\n19    14 12\n20     7 12\n21    24 12\n22    30 12\n23    22 12\n24    23 12\n25    27 12\n26    28 12\n27    26 12\n28    25 12\n29    29 12\n30    21 12\n31    33 12\n32    37 12\n33    36 12\n34    31 12\n35    39 12\n36    38 12\n37    32 12\n38    40 12\n39    34 12\n40    35 12\n41    44 10\n42    45 12\n43    43 12\n44    41 12\n45    47 12\n46    49 12\n47    46 12\n48    50 12\n49    42 12\n50    48 12\n```\n:::\n\n```{.r .cell-code}\nChickWeight %>% \n  count(\n    Chick\n  ) %>% \n  filter(n != 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Chick  n\n1    18  2\n2    16  7\n3    15  8\n4     8 11\n5    44 10\n```\n:::\n\n```{.r .cell-code}\nChickWeight %>% \n  count(\n    Chick\n  ) %>% \n  filter(n != 12) %>% \n  select(Chick)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Chick\n1    18\n2    16\n3    15\n4     8\n5    44\n```\n:::\n\n```{.r .cell-code}\nChickWeight %>% \n  filter(\n    Chick %in% (\n      ChickWeight %>% \n        count(Chick) %>% \n        filter(n == 12)\n    )$Chick\n  ) %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  arrange(desc(prise_poids), .by_group = TRUE) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 540 × 5\n   weight  Time Chick Diet  prise_poids\n    <dbl> <dbl> <ord> <fct>       <dbl>\n 1     81    18 13    1              10\n 2     91    20 13    1              10\n 3     48     2 13    1               7\n 4     60     6 13    1               7\n 5     53     4 13    1               5\n 6     65     8 13    1               5\n 7     96    21 13    1               5\n 8     71    12 13    1               4\n 9     67    10 13    1               2\n10     71    16 13    1               1\n# ℹ 530 more rows\n```\n:::\n\n```{.r .cell-code}\n# utilisation de slice pour sélectionner uniquement la plus forte valeur pour chaque poussin\nChickWeight %>% \n  filter(\n    Chick %in% (\n      ChickWeight %>% \n        count(Chick) %>% \n        filter(n == 12)\n    )$Chick\n  ) %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  arrange(desc(prise_poids), .by_group = TRUE) %>% \n  slice(1) %>% \n  ungroup() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 5\n   weight  Time Chick Diet  prise_poids\n    <dbl> <dbl> <ord> <fct>       <dbl>\n 1     81    18 13    1              10\n 2     85     8 9     1              17\n 3     89    14 20    1              12\n 4     63     6 10    1              11\n 5     72     6 17    1              11\n 6    144    20 19    1              24\n 7    136    16 4     1              28\n 8    124    10 6     1              27\n 9    168    12 11    1              29\n10    163    16 3     1              25\n# ℹ 35 more rows\n```\n:::\n\n```{.r .cell-code}\n# création d'un tableau résumé\nChickWeight %>% \n  filter(\n    Chick %in% (\n      ChickWeight %>% \n        count(Chick) %>% \n        filter(n == 12)\n    )$Chick\n  ) %>% \n  group_by(\n    Chick\n  ) %>% \n  mutate(\n    prise_poids = weight - lag(weight)\n  ) %>% \n  arrange(desc(prise_poids), .by_group = TRUE) %>% \n  slice(1) %>% \n  ungroup() %>% \n  summarise(\n    moyenne_jour = mean(prise_poids),\n    min_jour = min(prise_poids),\n    max_jour = max(prise_poids)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  moyenne_jour min_jour max_jour\n         <dbl>    <dbl>    <dbl>\n1         31.3       10       59\n```\n:::\n:::\n\n\n## `{tidyr}`\n\nLe package `{tidyr}` permet de mettre en forme les données pour respecter le format `tidy`.\\\n*Exemple avec le jeu de données `mtcars` clairement pas `tidy`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n# transformation en format tibble.\nmtcars %>% \n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n:::\n\n```{.r .cell-code}\n# perte des noms des voitures\n\n# enregistrement des noms dans une colonne\nmtcars %>% \n  rownames_to_column(var = \"vehicule\") %>% \n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 12\n   vehicule      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n:::\n\n```{.r .cell-code}\n# réalisation d'un pivot\nmtcars %>% \n  rownames_to_column(var = \"vehicule\") %>% \n  as_tibble() %>% \n  pivot_longer(\n    - vehicule,\n    names_to = \"variable\",\n    values_to = \"mesure\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 352 × 3\n   vehicule  variable mesure\n   <chr>     <chr>     <dbl>\n 1 Mazda RX4 mpg       21   \n 2 Mazda RX4 cyl        6   \n 3 Mazda RX4 disp     160   \n 4 Mazda RX4 hp       110   \n 5 Mazda RX4 drat       3.9 \n 6 Mazda RX4 wt         2.62\n 7 Mazda RX4 qsec      16.5 \n 8 Mazda RX4 vs         0   \n 9 Mazda RX4 am         1   \n10 Mazda RX4 gear       4   \n# ℹ 342 more rows\n```\n:::\n\n```{.r .cell-code}\n# exemple d'utilisation\nmtcars %>% \n  rownames_to_column(var = \"vehicule\") %>% \n  as_tibble() %>% \n  pivot_longer(\n    - vehicule,\n    names_to = \"variable\",\n    values_to = \"mesure\"\n  ) %>% \n  ggplot() +\n  aes(y = mesure, x = vehicule, color = variable) +\n  geom_point() +\n  facet_wrap(~ variable, scales = \"free_y\") +\n  theme_classic() +\n  theme(\n    axis.text.x = element_text(angle = 90),\n    legend.position = \"none\"\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tidyr-1.png){width=672}\n:::\n:::\n\n\n*Exemple avec `ChickWeight` pour la transformer en une table utilisable pour faire une ACP*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivoter\nChickWeight %>% \n  pivot_wider(\n    names_from = Time,\n    values_from = weight\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 14\n   Chick Diet    `0`   `2`   `4`   `6`   `8`  `10`  `12`  `14`  `16`  `18`  `20`\n   <ord> <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1     1        42    51    59    64    76    93   106   125   149   171   199\n 2 2     1        40    49    58    72    84   103   122   138   162   187   209\n 3 3     1        43    39    55    67    84    99   115   138   163   187   198\n 4 4     1        42    49    56    67    74    87   102   108   136   154   160\n 5 5     1        41    42    48    60    79   106   141   164   197   199   220\n 6 6     1        41    49    59    74    97   124   141   148   155   160   160\n 7 7     1        41    49    57    71    89   112   146   174   218   250   288\n 8 8     1        42    50    61    71    84    93   110   116   126   134   125\n 9 9     1        42    51    59    68    85    96    90    92    93   100   100\n10 10    1        41    44    52    63    74    81    89    96   101   112   120\n# ℹ 40 more rows\n# ℹ 1 more variable: `21` <dbl>\n```\n:::\n\n```{.r .cell-code}\n# retirer les lignes où il manque au moins une mesure \nChickWeight %>% \n  pivot_wider(\n    names_from = Time,\n    values_from = weight\n  ) %>% \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 14\n   Chick Diet    `0`   `2`   `4`   `6`   `8`  `10`  `12`  `14`  `16`  `18`  `20`\n   <ord> <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1     1        42    51    59    64    76    93   106   125   149   171   199\n 2 2     1        40    49    58    72    84   103   122   138   162   187   209\n 3 3     1        43    39    55    67    84    99   115   138   163   187   198\n 4 4     1        42    49    56    67    74    87   102   108   136   154   160\n 5 5     1        41    42    48    60    79   106   141   164   197   199   220\n 6 6     1        41    49    59    74    97   124   141   148   155   160   160\n 7 7     1        41    49    57    71    89   112   146   174   218   250   288\n 8 9     1        42    51    59    68    85    96    90    92    93   100   100\n 9 10    1        41    44    52    63    74    81    89    96   101   112   120\n10 11    1        43    51    63    84   112   139   168   177   182   184   181\n# ℹ 35 more rows\n# ℹ 1 more variable: `21` <dbl>\n```\n:::\n\n```{.r .cell-code}\n# modifier les noms des colonnes \nChickWeight %>% \n  pivot_wider(\n    names_from = Time,\n    names_glue = \"jour_{Time}\",\n    values_from = weight\n  ) %>% \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 14\n   Chick Diet  jour_0 jour_2 jour_4 jour_6 jour_8 jour_10 jour_12 jour_14\n   <ord> <fct>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n 1 1     1         42     51     59     64     76      93     106     125\n 2 2     1         40     49     58     72     84     103     122     138\n 3 3     1         43     39     55     67     84      99     115     138\n 4 4     1         42     49     56     67     74      87     102     108\n 5 5     1         41     42     48     60     79     106     141     164\n 6 6     1         41     49     59     74     97     124     141     148\n 7 7     1         41     49     57     71     89     112     146     174\n 8 9     1         42     51     59     68     85      96      90      92\n 9 10    1         41     44     52     63     74      81      89      96\n10 11    1         43     51     63     84    112     139     168     177\n# ℹ 35 more rows\n# ℹ 4 more variables: jour_16 <dbl>, jour_18 <dbl>, jour_20 <dbl>,\n#   jour_21 <dbl>\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}