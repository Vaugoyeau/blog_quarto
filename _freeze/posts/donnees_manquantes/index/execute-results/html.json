{
  "hash": "3d88c6285e0beb513a4a14ab495e07c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Les données manqunates\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2024/02/20\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, statistiques, analyse de données]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](deut.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 20 février 2024**](https://www.twitch.tv/videos/2068439847).\n\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_donnees_manquantes).\n:::\n\n# Définitions   \n\nLes données manquantes sont les données qui ne sont pas présentes.  \nLa donnée peut-être remplacée dans le tableau par :  \n\n- `NA`  \n- Une autre valeur dépendante des données ou de la personne qui s'en ai occupée : `0`, `NO`, `999`...   \n    \n::: callout-note\n\nQuelques soit le cas, il existent plusieurs origines aux données manquantes.  \n\n:::  \n  \n\n# Type de données manquantes  \n  \nLes données manquantes, représentées par `NA` ou autre peuvent avoir plusieurs origines :  \n\n-   La donnée **n'est pas compatible**. *Par exemple, une personne rentre du texte au lieu d'un numéro de téléphone.* Dans ce cas le **système ne prends pas en charge** la réponse et la qualifie en `NA` pour `Not Applicable`\\\n-   La donnée **n'existe pas**. *Par exemple la personne n'a pas de numéro de téléphone*, dans ce cas, le système la qualifie de `NA` pour `Not Available`\\\n-   La donnée **existe mais n'a pas été communiquées**. *Par exemple la personne a refusé de donner son numéro*, dans ce cas, le système la qualifie de `NA` pour `Not Answer`  \n  \nDans tous les cas, la **seule information transmise** est que la **données n'est pas disponible**.\\\nIl n'est pas toujours possible de cerner l'origine du problème mais cela n'empêche pas d'agir.\\\nIl faut commencer par se demander ce que **signifie cette absence** et **comment elle va impacter** notre système.\n  \n# Conséquences des valeurs manquantes  \n\n-   **Perte d'information** : Si la donnée peut-être retrouvée ou remplacée, pourquoi s'en empêcher ?  \n-   **Erreur dans la généralisation** : Si beaucoup de données sont manquantes et que les conclusions se basent uniquement sur celles présentent, **est-ce que cela représente vraiment la réalité ?**  \n-   Comportement de certains modèles stats  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(missMDA)\ndata(\"snorena\")\n\n# régression logistique \nregression_logistique <- glm(\n  snore ~ age + weight + size + alcohol, \n  family = binomial, \n  data = snorena\n  )\n\nregression_logistique\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:  glm(formula = snore ~ age + weight + size + alcohol, family = binomial, \n    data = snorena)\n\nCoefficients:\n(Intercept)          age       weight         size      alcohol  \n  -4.221694     0.061238     0.001180    -0.001735     0.157680  \n\nDegrees of Freedom: 72 Total (i.e. Null);  68 Residual\n  (27 observations effacées parce que manquantes)\nNull Deviance:\t    93.83 \nResidual Deviance: 84.72 \tAIC: 94.72\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(regression_logistique)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = snore ~ age + weight + size + alcohol, family = binomial, \n    data = snorena)\n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)  \n(Intercept) -4.221694   6.845567  -0.617   0.5374  \nage          0.061238   0.025278   2.423   0.0154 *\nweight       0.001180   0.040353   0.029   0.9767  \nsize        -0.001735   0.055573  -0.031   0.9751  \nalcohol      0.157680   0.080148   1.967   0.0491 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 93.828  on 72  degrees of freedom\nResidual deviance: 84.724  on 68  degrees of freedom\n  (27 observations effacées parce que manquantes)\nAIC: 94.724\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n\n```{.r .cell-code}\nregression_logistique_2 <- glm(\n  snore ~ age + alcohol, \n  family = binomial, \n  data = snorena\n  )\n\nAIC(regression_logistique, regression_logistique_2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in AIC.default(regression_logistique, regression_logistique_2): tous\nles modèles n'ont pas été ajustés sur le même nombre d'observations\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        df       AIC\nregression_logistique    5  94.72355\nregression_logistique_2  3 104.50932\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(regression_logistique_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = snore ~ age + alcohol, family = binomial, data = snorena)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -5.20428    1.50198  -3.465  0.00053 ***\nage          0.07353    0.02483   2.961  0.00307 ** \nalcohol      0.20418    0.07716   2.646  0.00814 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 113.321  on 86  degrees of freedom\nResidual deviance:  98.509  on 84  degrees of freedom\n  (13 observations effacées parce que manquantes)\nAIC: 104.51\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# ACP\nlibrary(FactoMineR)\n\nacp <- PCA(snorena |> select(where(is.numeric)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in PCA(select(snorena, where(is.numeric))): Missing values are imputed\nby the mean of the variable: you should use the imputePCA function of the\nmissMDA package\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n  \nLa régression logistique supprime les lignes avec les données manquantes alors que l'analyse en composantes principales les remplace par la moyenne de la colonne.  \nIl est donc important de garder en tête comment sont traités les données manquantes en fonction des statistiques utilisées.  \n  \n# Identifier les valeurs manquantes  \n  \nPour savoir comment agir, il faut commencer par quantifier et localiser les valeurs manquantes.  \n\nUne réalisation simple est l'utilisation de la fonction `summary()` du package `{base}`.  \n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(snorena)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age            weight           size          alcohol         sex    \n Min.   :23.00   Min.   : 42.0   Min.   :158.0   Min.   : 0.000   M   :75  \n 1st Qu.:43.00   1st Qu.: 77.0   1st Qu.:166.0   1st Qu.: 0.000   W   :22  \n Median :51.00   Median : 94.0   Median :186.0   Median : 2.000   NA's: 3  \n Mean   :52.16   Mean   : 90.4   Mean   :181.1   Mean   : 2.905            \n 3rd Qu.:63.00   3rd Qu.:104.5   3rd Qu.:194.0   3rd Qu.: 4.000            \n Max.   :74.00   Max.   :120.0   Max.   :208.0   Max.   :15.000            \n NA's   :3       NA's   :9       NA's   :5       NA's   :5                 \n  snore    tobacco  \n N   :62   N   :32  \n Y   :32   Y   :61  \n NA's: 6   NA's: 7  \n                    \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n\n\nLe package `{naniar}` est spécialement adapté à la visualisation des données manquantes.  \n\nVisualisation du nombre (argument `show_pct = FALSE`) ou de la proportion (argument `show_pct = TRUE`) de données manquantes grâce aux fonctions `gg_miss_var()`.  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(naniar)\n\ngg_miss_var(snorena, show_pct = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n  \nLa fonction `gg_miss_upset()` permet de représenter sur un graphique les variables qui ont des données manquantes et le lien entre les colonnes.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_miss_upset(snorena)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nLa fonction `geom_miss_point()` permet de visualiser les valeurs manquantes sur les nuage de poin.  \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(snorena) +\n  aes(x = size, y = weight) +\n  geom_miss_point() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nEt il existe d'autres fonctions :  \n\n- `vis_miss()` du package `{visdata}`  \n- `md.pattern()` du package `{mice}`    \n  \n\n::: {.cell}\n\n```{.r .cell-code}\nvisdat::vis_miss(snorena)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmice::md.pattern(snorena, rotate.names = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age sex size alcohol snore tobacco weight   \n65   1   1    1       1     1       1      1  0\n7    1   1    1       1     1       1      0  1\n5    1   1    1       1     1       0      1  1\n2    1   1    1       1     1       0      0  2\n6    1   1    1       1     0       1      1  1\n4    1   1    1       0     1       1      1  1\n5    1   1    0       1     1       1      1  1\n3    1   0    1       1     1       1      1  1\n2    0   1    1       1     1       1      1  1\n1    0   1    1       0     1       1      1  2\n     3   3    5       5     6       7      9 38\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n## Détection des valeurs manquantes\n\nLes données manquantes peuvent avoir été remplacées par d'autres. Il est nécessaire de faite une **analyse descriptive** pour les détecter.  \n:::\n\n# L'analyse descriptive  \nL'analyse descriptive a pour but d'analyser les variables pour connaître la nature des données mais aussi identifier les valeurs extrêmes (à ne pas confondre avec aberrantes).  \n  \nUtilisation de fonctions rapide comme :  \n\n- `skim()` du package `{skimr}`  \n- `dfSummary()` du package `{summarytools}`  \n- `create_report()` du package `{DataExplorer}` : [`DataExplorer::create_report(snorena)`](https://github.com/Vaugoyeau/twitch_donnees_manquantes/blob/master/report.html)  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(snorena)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |snorena |\n|Number of rows           |100     |\n|Number of columns        |7       |\n|_______________________  |        |\n|Column type frequency:   |        |\n|factor                   |3       |\n|numeric                  |4       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts   |\n|:-------------|---------:|-------------:|:-------|--------:|:------------|\n|sex           |         3|          0.97|FALSE   |        2|M: 75, W: 22 |\n|snore         |         6|          0.94|FALSE   |        2|N: 62, Y: 32 |\n|tobacco       |         7|          0.93|FALSE   |        2|Y: 61, N: 32 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|    sd|  p0| p25| p50|   p75| p100|hist  |\n|:-------------|---------:|-------------:|------:|-----:|---:|---:|---:|-----:|----:|:-----|\n|age           |         3|          0.97|  52.16| 11.52|  23|  43|  51|  63.0|   74|▁▇▇▇▇ |\n|weight        |         9|          0.91|  90.40| 18.08|  42|  77|  94| 104.5|  120|▁▃▅▇▆ |\n|size          |         5|          0.95| 181.09| 13.50| 158| 166| 186| 194.0|  208|▆▂▅▇▁ |\n|alcohol       |         5|          0.95|   2.91|  3.36|   0|   0|   2|   4.0|   15|▇▃▁▁▁ |\n\n\n:::\n\n```{.r .cell-code}\nsummarytools::dfSummary(snorena)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nData Frame Summary  \nsnorena  \nDimensions: 100 x 7  \nDuplicates: 0  \n\n----------------------------------------------------------------------------------------------------------\nNo   Variable    Stats / Values             Freqs (% of Valid)   Graph                 Valid     Missing  \n---- ----------- -------------------------- -------------------- --------------------- --------- ---------\n1    age         Mean (sd) : 52.2 (11.5)    40 distinct values         . .   :   .     97        3        \n     [integer]   min < med < max:                                      : :   :   :     (97.0%)   (3.0%)   \n                 23 < 51 < 74                                        : : : . : . : .                      \n                 IQR (CV) : 20 (0.2)                                 : : : : : : : :                      \n                                                                 . : : : : : : : : :                      \n\n2    weight      Mean (sd) : 90.4 (18.1)    45 distinct values             : .         91        9        \n     [integer]   min < med < max:                                          : :         (91.0%)   (9.0%)   \n                 42 < 94 < 120                                         . . : :                            \n                 IQR (CV) : 27.5 (0.2)                               : : : : : .                          \n                                                                 . : : : : : : :                          \n\n3    size        Mean (sd) : 181.1 (13.5)   30 distinct values                 :       95        5        \n     [integer]   min < med < max:                                  .           :       (95.0%)   (5.0%)   \n                 158 < 186 < 208                                   :         . :                          \n                 IQR (CV) : 28 (0.1)                             : :     : : : :                          \n                                                                 : : : . : : : :                          \n\n4    alcohol     Mean (sd) : 2.9 (3.4)      12 distinct values   :                     95        5        \n     [integer]   min < med < max:                                :                     (95.0%)   (5.0%)   \n                 0 < 2 < 15                                      : .                                      \n                 IQR (CV) : 4 (1.2)                              : :                                      \n                                                                 : : : : .                                \n\n5    sex         1. M                       75 (77.3%)           IIIIIIIIIIIIIII       97        3        \n     [factor]    2. W                       22 (22.7%)           IIII                  (97.0%)   (3.0%)   \n\n6    snore       1. N                       62 (66.0%)           IIIIIIIIIIIII         94        6        \n     [factor]    2. Y                       32 (34.0%)           IIIIII                (94.0%)   (6.0%)   \n\n7    tobacco     1. N                       32 (34.4%)           IIIIII                93        7        \n     [factor]    2. Y                       61 (65.6%)           IIIIIIIIIIIII         (93.0%)   (7.0%)   \n----------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n  \n\n# Traitement des valeurs manquantes\n\n-   Remplacer la donnée manquante par :\n    -   La vraie valeur s'il est possible de la retrouver.\\\n    -   Une valeur de remplacement :\n        -   Déterminée à partir des autres données de la variables : *moyenne*, *médiane*, *minimum*, *maximum*...\\\n        -   Modélisée à partir des autres variables grâce à *une régression linéaire*, *une ACP*...\\\n-   Ne pas remplacer la données mais garder le `NA`\\\n-   Supprimer la ligne ou la colonne concernée. **Cette solution est la moins envisageable et ne doit être mise en place que si les deux autres ne sont pas possibles.**  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# remplacement par régression logistique\nsnore_pred <- predict(\n  regression_logistique_2, \n  newdata = snorena |> filter(is.na(snore))\n  )\n\nsnorena_mod <- snorena |> \n  mutate(\n    snore = \n      case_when(\n        is.na(snore) ~ \"N\",\n        TRUE ~ snore\n      ) |> \n      as.factor()\n  )\n\nsummary(snorena_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age            weight           size          alcohol         sex    \n Min.   :23.00   Min.   : 42.0   Min.   :158.0   Min.   : 0.000   M   :75  \n 1st Qu.:43.00   1st Qu.: 77.0   1st Qu.:166.0   1st Qu.: 0.000   W   :22  \n Median :51.00   Median : 94.0   Median :186.0   Median : 2.000   NA's: 3  \n Mean   :52.16   Mean   : 90.4   Mean   :181.1   Mean   : 2.905            \n 3rd Qu.:63.00   3rd Qu.:104.5   3rd Qu.:194.0   3rd Qu.: 4.000            \n Max.   :74.00   Max.   :120.0   Max.   :208.0   Max.   :15.000            \n NA's   :3       NA's   :9       NA's   :5       NA's   :5                 \n snore  tobacco  \n N:68   N   :32  \n Y:32   Y   :61  \n        NA's: 7  \n                 \n                 \n                 \n                 \n```\n\n\n:::\n\n```{.r .cell-code}\n# régression linéaire\nggplot(snorena_mod) + \n  aes(x = weight, y = size) +\n  geom_miss_point() +\n  geom_smooth(method = \"lm\") +\n  ggpubr::stat_regline_equation() +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 14 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 14 rows containing non-finite outside the scale range\n(`stat_regline_equation()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsnorena_mod <- snorena_mod |> \n  mutate(\n    size = \n      case_when(\n        is.na(size) ~ 120 + 0.69 * weight,\n        TRUE ~ size\n      )\n  )\n\nsummary(snorena_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age            weight           size          alcohol         sex    \n Min.   :23.00   Min.   : 42.0   Min.   :153.8   Min.   : 0.000   M   :75  \n 1st Qu.:43.00   1st Qu.: 77.0   1st Qu.:166.0   1st Qu.: 0.000   W   :22  \n Median :51.00   Median : 94.0   Median :186.0   Median : 2.000   NA's: 3  \n Mean   :52.16   Mean   : 90.4   Mean   :181.0   Mean   : 2.905            \n 3rd Qu.:63.00   3rd Qu.:104.5   3rd Qu.:194.0   3rd Qu.: 4.000            \n Max.   :74.00   Max.   :120.0   Max.   :208.0   Max.   :15.000            \n NA's   :3       NA's   :9                       NA's   :5                 \n snore  tobacco  \n N:68   N   :32  \n Y:32   Y   :61  \n        NA's: 7  \n                 \n                 \n                 \n                 \n```\n\n\n:::\n\n```{.r .cell-code}\n# regression linéaire\nreg_lin <- lm(weight ~ size, data = snorena)\nreg_lin$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)        size \n -136.42657     1.25551 \n```\n\n\n:::\n\n```{.r .cell-code}\nsnorena_mod <- snorena_mod |> \n  mutate(\n    weight = \n      case_when(\n        is.na(weight) ~ \n          reg_lin$coefficients[1] + reg_lin$coefficients[2] * size,\n        TRUE ~ weight\n      )\n  )\n\nsummary(snorena_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age            weight            size          alcohol         sex    \n Min.   :23.00   Min.   : 42.00   Min.   :153.8   Min.   : 0.000   M   :75  \n 1st Qu.:43.00   1st Qu.: 77.00   1st Qu.:166.0   1st Qu.: 0.000   W   :22  \n Median :51.00   Median : 95.00   Median :186.0   Median : 2.000   NA's: 3  \n Mean   :52.16   Mean   : 90.72   Mean   :181.0   Mean   : 2.905            \n 3rd Qu.:63.00   3rd Qu.:106.17   3rd Qu.:194.0   3rd Qu.: 4.000            \n Max.   :74.00   Max.   :124.72   Max.   :208.0   Max.   :15.000            \n NA's   :3                                        NA's   :5                 \n snore  tobacco  \n N:68   N   :32  \n Y:32   Y   :61  \n        NA's: 7  \n                 \n                 \n                 \n                 \n```\n\n\n:::\n:::\n\n\n::: callout-note  \n# `replace_na()` du package `{tidyr}`  \n\nLors du live j'ai oublié de présenter la fonction `replace_na()` du package `{tidyr}` !  \nCette fonction permet de remplacer les valeurs manquantes [d'une colonne ou plusieurs colonnes par une valeur spécifique](https://tidyr.tidyverse.org/reference/replace_na.html).  \n\n:::\n  \n# Pour finir  \nL'idée de cette article est d'initier au traitement des données manquantes, pas de remplacer une formation dessus 😊  \nBonne journée,  \nMarie  \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}