{
  "hash": "a6e2a4e16153d579ffe9b248995fe199",
  "result": {
    "markdown": "---\ntitle: \"Le `{tidyverse}` : `{forcats}` et `{stringr}`\"\nauthor: \"Marie Vaugoyeau\"\ndate: \"2023/03/21\"\ndate-format: \"D MMMM YYYY\"\ncategories: [twitch, Rnewbies, tidyverse]\ntoc: true\ntoc-title: Sur cette page\n---\n\n\n[![](nom_sur_mur.png){fig-align=\"center\"}](https://500px.com/p/antoinemach?view=photos)\n\n::: {.callout-note icon=\"false\"}\n[**Twitch du 21 mars 2023**](https://www.twitch.tv/videos/1774056539)  \n\nCode disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_tidyverse_forcats_stringr)  \n:::\n\n\n\n\n\n# Introduction\n\n::: {.callout-note icon=\"false\"}\nCette partie reprend la première partie de l'article du 7 février 2023 sur le `{tidyverse}`.\n\nLe code est disponible sur [GitHub](https://github.com/Vaugoyeau/twitch_tidyverse_forcats_stringr).\n:::\n\n## Historique\n\nLe `{tidyverse}` s'appelait encore le `hadleyverse` il y a quelques année, c'est-à-dire `l'univers de Hadley` pour [Hadley Wickham](https://hadley.nz/) son génial créateur.\\\nLe but de Hadley est de rendre l'analyse données plus facile, plus rapide et surtout **plus fun** et je trouve que cela transparaît dans ses packages !\\\nLe `{tidyverse}` c'est l'ensemble des packages open-source développé par Hadley et son équipe (Hadley travaille maintenant pour RStudio en plus de plusieurs universités) qui partagent la même philosophie, la même structure de données (le fameux format `tidy`) et la même syntaxe.\n\n## Le format `tidy`\n\nLe format `tidy`repose sur la répétition des lignes des individus afin de limiter le nombre de colonnes.\\\nDans le plus stricte cas, le format `tidy` ne présente que 3 colonnes :\n\n\\_ Identification de l'individu, *par exemple* : `nom_du_pays`, `num_bague_identification`,...\\\n\\_ Variables mesurées, *par exemple* : `variable` peut prendre comme modalités `superficie`, `taille_population`, `PIB` ou `masse`, `taille`, `longueur_du_bec`...\\\n\\_ Valeur de la mesure. **Attention**, le format `tidy` ne supporte par plusieurs type de données dans la même colonne !\n\n## La syntaxe `tidyverse`\n\nNon détaillée ici, je vous invite à consulter le [tidyverse style guide](https://style.tidyverse.org/index.html).\n\n## Les packages concernés\n\n\\_ [`ggplot2`](https://ggplot2.tidyverse.org/) : Visulisation des données\\\n\\_ [`dplyr`](https://dplyr.tidyverse.org/) : Manipulation des données (filtrer, trier,...) à ne pas confondre avec `tidyr` qui manipule le format du jeu de données. Présenté [le 7 février sur twitch](https://www.twitch.tv/videos/1730949759).\\\n\\_ [`tidyr`](https://tidyr.tidyverse.org/) : Modification du format du jeu de données pour en faire un jeu de donnée `tidy`. Présenté [le 7 février sur twitch](https://www.twitch.tv/videos/1730949759).\\\n\\_ [`readr`](https://readr.tidyverse.org/) : Lecture rapide de fichiers de données format `csv` et autres. **Attention** : format `xslx` non pris en charge, il faut utiliser le package [`readxl`](https://readxl.tidyverse.org/) qui fait partie du `tidyverse` au sens large mais qui n'est pas attaché par défaut quand on fait `library(tidyverse)`\\\n\\_ [`purrr`](https://purrr.tidyverse.org/) : Permet le remplacement d'un grand nombre de boucles. Cf le live du [2 mai 2023](https://www.twitch.tv/videos/1809466535).\\\n\\_ [`tibble`](https://tibble.tidyverse.org/) : Format des données `tidy`\\\n\\_ [`stringr`](https://stringr.tidyverse.org/) : Manipulation des chaînes de caractères. *Vu aujourd'hui*\\\n\\_ [`forcats`](https://forcats.tidyverse.org/) : Manipulation des variables facteurs `factors`. *Vu aujourd'hui*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# Projecteur sur :\n\n## `{forcats}`\n\nLe package `{forcats}` permet de manipuler les facteurs en modifiant les modalités, en leur réordonnants...\n\n::: {.callout-note icon=\"false\"}\nQuasiment toutes les fonctions de ce package commencent par `fct_` pour montrer qu'elles manipulent directement les vecteurs (contrairement aux fonctions du `tidyverse` présentées le mois dernier qui agissent sur un jeu de données `tibble` ou non).\n:::\n\nQu'est ce qu'un facteur ? C'est un vecteur avec des modalités ordonnées, c'est-à-dire que derrière les mots il y a un vecteur numérique.\\\nCette valeur numérique est accessible via la fonction `fct_anon()` qui permet aussi d'anonymiser.\\\n*Exercice : Utilisation du jeu de données `{starwars}`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      <list> <\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp…\n$ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",…\n```\n:::\n\n```{.r .cell-code}\n# Qu'est-ce qu'un facteur ?\nstarwars$name %>% fct_anon()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 78 87 35 16 70 29 34 75 56 03 09 17 57 36 15 86 73 20 52 79 60 44 72 81 85\n[26] 51 01 41 76 83 05 45 80 23 54 14 19 31 38 50 82 67 22 24 27 68 37 08 11 26\n[51] 30 25 61 18 28 43 66 64 63 65 02 39 32 74 49 58 62 84 69 55 59 07 12 40 77\n[76] 13 46 47 53 71 48 21 10 06 33 42 04\n87 Levels: 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 ... 87\n```\n:::\n\n```{.r .cell-code}\nstarwars$hair_color %>% fct_anon()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 07   <NA> <NA> 08   12   04   12   <NA> 10   02   07   09   12   12   <NA>\n[16] <NA> 12   12   06   05   10   08   08   10   08   08   03   12   12   08  \n[31] 12   08   07   08   08   08   12   10   08   10   10   08   08   08   08  \n[46] 08   08   08   06   08   10   08   08   08   08   08   10   12   12   08  \n[61] 10   10   12   06   10   10   01   08   08   08   06   08   08   08   08  \n[76] 08   08   12   12   08   08   10   12   12   08   11   12  \nLevels: 01 02 03 04 05 06 07 08 09 10 11 12\n```\n:::\n:::\n\n\n### Analyser les facteurs\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compter les modalités\nstarwars$eye_color %>% fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 2\n   f                 n\n   <fct>         <int>\n 1 black            10\n 2 blue             19\n 3 blue-gray         1\n 4 brown            21\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             3\n 9 orange            8\n10 pink              1\n11 red               5\n12 red, blue         1\n13 unknown           3\n14 white             1\n15 yellow           11\n```\n:::\n\n```{.r .cell-code}\nstarwars %>% count(eye_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 2\n   eye_color         n\n   <chr>         <int>\n 1 black            10\n 2 blue             19\n 3 blue-gray         1\n 4 brown            21\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             3\n 9 orange            8\n10 pink              1\n11 red               5\n12 red, blue         1\n13 unknown           3\n14 white             1\n15 yellow           11\n```\n:::\n\n```{.r .cell-code}\n# afficher l'intégralité des modalité\nstarwars$species %>%  fct_unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Aleena         Besalisk       Cerean         Chagrian       Clawdite      \n [6] Droid          Dug            Ewok           Geonosian      Gungan        \n[11] Human          Hutt           Iktotchi       Kaleesh        Kaminoan      \n[16] Kel Dor        Mirialan       Mon Calamari   Muun           Nautolan      \n[21] Neimodian      Pau'an         Quermian       Rodian         Skakoan       \n[26] Sullustan      Tholothian     Togruta        Toong          Toydarian     \n[31] Trandoshan     Twi'lek        Vulptereen     Wookiee        Xexto         \n[36] Yoda's species Zabrak         <NA>          \n37 Levels: Aleena Besalisk Cerean Chagrian Clawdite Droid Dug ... Zabrak\n```\n:::\n:::\n\n\n### Modifier les facteurs\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combiner les colonnes\nfct_cross(starwars$sex, starwars$gender, sep = \"/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] male/masculine           none/masculine           none/masculine          \n [4] male/masculine           female/feminine          male/masculine          \n [7] female/feminine          none/masculine           male/masculine          \n[10] male/masculine           male/masculine           male/masculine          \n[13] male/masculine           male/masculine           male/masculine          \n[16] hermaphroditic/masculine male/masculine           male/masculine          \n[19] male/masculine           male/masculine           male/masculine          \n[22] none/masculine           male/masculine           male/masculine          \n[25] male/masculine           male/masculine           female/feminine         \n[28] male/masculine           male/masculine           male/masculine          \n[31] male/masculine           male/masculine           male/masculine          \n[34] male/masculine           male/masculine           male/masculine          \n[37] <NA>                     male/masculine           male/masculine          \n[40] <NA>                     female/feminine          male/masculine          \n[43] male/masculine           female/feminine          male/masculine          \n[46] male/masculine           male/masculine           male/masculine          \n[49] male/masculine           male/masculine           male/masculine          \n[52] female/feminine          male/masculine           male/masculine          \n[55] male/masculine           male/masculine           male/masculine          \n[58] female/feminine          male/masculine           male/masculine          \n[61] female/feminine          female/feminine          female/feminine         \n[64] male/masculine           male/masculine           male/masculine          \n[67] female/feminine          male/masculine           male/masculine          \n[70] female/feminine          female/feminine          male/masculine          \n[73] none/feminine            male/masculine           male/masculine          \n[76] female/feminine          male/masculine           male/masculine          \n[79] male/masculine           <NA>                     male/masculine          \n[82] male/masculine           female/feminine          male/masculine          \n[85] none/masculine           <NA>                     female/feminine         \n5 Levels: female/feminine none/feminine ... none/masculine\n```\n:::\n\n```{.r .cell-code}\n# en dplyr avec la fonction glue() du package {glue}\nmutate(\n  starwars,\n  sexgenre = glue::glue(\"{sex}/{gender}\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, sexgenre <glue>\n```\n:::\n\n```{.r .cell-code}\n# changer les valeurs de gender -> sex\nstarwars_mod <- starwars %>% \n  mutate(\n    sexe = sex %>% as_factor(),\n    genre = fct_recode(\n      gender, \n      male = \"masculine\", \n      female = \"feminine\"\n    )\n  )\n\n# homogénéiser les niveaux\nfct_unify(list(starwars_mod$sexe, starwars_mod$genre))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] male           none           none           male           female        \n [6] male           female         none           male           male          \n[11] male           male           male           male           male          \n[16] hermaphroditic male           male           male           male          \n[21] male           none           male           male           male          \n[26] male           female         male           male           male          \n[31] male           male           male           male           male          \n[36] male           <NA>           male           male           <NA>          \n[41] female         male           male           female         male          \n[46] male           male           male           male           male          \n[51] male           female         male           male           male          \n[56] male           male           female         male           male          \n[61] female         female         female         male           male          \n[66] male           female         male           male           female        \n[71] female         male           none           male           male          \n[76] female         male           male           male           <NA>          \n[81] male           male           female         male           none          \n[86] <NA>           female        \nLevels: male none female hermaphroditic\n\n[[2]]\n [1] male   male   male   male   female male   female male   male   male  \n[11] male   male   male   male   male   male   male   male   male   male  \n[21] male   male   male   male   male   male   female male   male   male  \n[31] male   male   male   male   male   male   <NA>   male   male   <NA>  \n[41] female male   male   female male   male   male   male   male   male  \n[51] male   female male   male   male   male   male   female male   male  \n[61] female female female male   male   male   female male   male   female\n[71] female male   female male   male   female male   male   male   <NA>  \n[81] male   male   female male   male   <NA>   female\nLevels: male none female hermaphroditic\n```\n:::\n:::\n\n\n### Changer l'ordre des modalités\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## origine\nstarwars %>% \n  ggplot() +\n  aes(x = eye_color) +\n  geom_bar() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/forcats_ordre-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## en fonction de la frequence\nstarwars %>% \n  ggplot() +\n  aes(x = fct_infreq(eye_color)) +\n  geom_bar() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/forcats_ordre-2.png){width=672}\n:::\n\n```{.r .cell-code}\n## descendant\nstarwars %>% \n  ggplot() +\n  aes(x = fct_infreq(eye_color) %>% fct_rev()) +\n  geom_bar() +\n  xlab(\"couleur des yeux\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/forcats_ordre-3.png){width=672}\n:::\n\n```{.r .cell-code}\n## ordre au hasard\nstarwars %>% \n  ggplot() +\n  aes(x = fct_infreq(eye_color) %>% fct_shuffle()) +\n  geom_bar() +\n  xlab(\"couleur des yeux\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/forcats_ordre-4.png){width=672}\n:::\n:::\n\n\nRessources intéressantes :\n\n\\_ [le cheatsheet de `{forcats}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf)\\\n\\_ [la vignette de `{forcats}`](https://forcats.tidyverse.org/articles/forcats.html)\n\n## `{stringr}`\n\nLe package `{stringr}` permet de manipuler facilement des chaînes de caractères.\n\n::: {.callout-note icon=\"false\"}\nComme les fonctions du package `{forcats}`, les fonctions du package `{stringr}` agit sur un vecteur, non un jeu de données et commencent majoritairement par `str_`.\n:::\n\n### Manipulation de base\n\n*Création et manipulation de chaînes de caractères*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# texte <- c('c'est', 'ceci')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- c(\"c'est\", \"l'idée\", \"folle\", \"qu'une\", \"femme\", \"est\", \"une\", \"personne\")\n\n# calcul longeur\nstr_c(texte, collapse = \" \") %>% \n  str_length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 48\n```\n:::\n\n```{.r .cell-code}\nstr_length(texte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6 5 6 5 3 3 8\n```\n:::\n\n```{.r .cell-code}\n# extraire une partie\nstr_c(texte, collapse = \" \") %>%  \n  str_sub(start = -8L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"personne\"\n```\n:::\n\n```{.r .cell-code}\nstr_sub(texte, start = 2, end = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"'est\" \"'idé\" \"olle\" \"u'un\" \"emme\" \"st\"   \"ne\"   \"erso\"\n```\n:::\n\n```{.r .cell-code}\n# trier par ordre alphabétique\nstr_sort(texte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c'est\"    \"est\"      \"femme\"    \"folle\"    \"l'idée\"   \"personne\" \"qu'une\"  \n[8] \"une\"     \n```\n:::\n\n```{.r .cell-code}\nstr_rank(texte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 5 4 7 3 2 8 6\n```\n:::\n\n```{.r .cell-code}\n# séparer selon un marqueur\nstr_split(texte, \"'\", simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]       [,2]  \n[1,] \"c\"        \"est\" \n[2,] \"l\"        \"idée\"\n[3,] \"folle\"    \"\"    \n[4,] \"qu\"       \"une\" \n[5,] \"femme\"    \"\"    \n[6,] \"est\"      \"\"    \n[7,] \"une\"      \"\"    \n[8,] \"personne\" \"\"    \n```\n:::\n\n```{.r .cell-code}\ntexte %>% \n  str_split(\"e\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"c'\" \"st\"\n\n[[2]]\n[1] \"l'idé\" \"\"     \n\n[[3]]\n[1] \"foll\" \"\"    \n\n[[4]]\n[1] \"qu'un\" \"\"     \n\n[[5]]\n[1] \"f\"  \"mm\" \"\"  \n\n[[6]]\n[1] \"\"   \"st\"\n\n[[7]]\n[1] \"un\" \"\"  \n\n[[8]]\n[1] \"p\"     \"rsonn\" \"\"     \n```\n:::\n:::\n\n\n### Initiation au `regex`\n\n::: {.callout-note icon=\"false\"}\nLe `regex` est l'abréviation de `regular expression`, soit `expression régulière`.\n:::\n\nL'expression régulière permet de détecter des structures particulières, des `pattern` dans du texte.\\\n\\*Par exemple, en tant qu'être humain il est facile de savoir que `blabla@truc.much` a le format d'une adresse e-mail. L'ordinateur, lui a besoin qu'on le \"guide\" sur le format que l'on cherche.\\\nEn regex, une adresse e-mail se traduit par `[:alphanum:]+@[:alphanum:]+\\\\.[:alphanum:]{2,10}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(texte, \"e\")\nstr_extract(texte, \"[aeiou]\")\nstr_extract_all(texte, \"[aeiou]\", simplify = TRUE)\n\n# attention au `.` qui remplace n'importe quel caractère\nstr_detect(texte, \".\")\nstr_detect(autre_texte, \"\\.\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '\\.' est un code escape non reconnu dans une chaîne de caractères débutant \"\"\\.\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(texte, \"\\\\.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nautre_texte <- \"Le féminisme.\"\nstr_locate_all(autre_texte, \"sm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n     start end\n[1,]    10  11\n```\n:::\n\n```{.r .cell-code}\n# détection de ponctuation\nstr_detect(texte, \"[:punct:]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nstr_detect(autre_texte, \"[:punct:]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### Modification du texte\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# à la première itération\nstr_replace(texte, \"une\", \"un\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c'est\"    \"l'idée\"   \"folle\"    \"qu'un\"    \"femme\"    \"est\"      \"un\"      \n[8] \"personne\"\n```\n:::\n\n```{.r .cell-code}\ntexte %>% \n  str_c(collapse = \" \") %>% \n  str_replace(\"une\", \"un\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c'est l'idée folle qu'un femme est une personne\"\n```\n:::\n\n```{.r .cell-code}\n# ou à chaque fois\ntexte %>% \n  str_c(collapse = \" \") %>% \n  str_replace_all(\"une\", \"un\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c'est l'idée folle qu'un femme est un personne\"\n```\n:::\n\n```{.r .cell-code}\n# passer en minuscule\nautre_texte %>% \n  str_to_lower()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"le féminisme.\"\n```\n:::\n\n```{.r .cell-code}\n# ou en majuscule\nautre_texte %>% \n  str_to_upper()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"LE FÉMINISME.\"\n```\n:::\n\n```{.r .cell-code}\n# lettre capitale pour chaque première lettre de mots\nautre_texte %>% \n  str_to_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Le Féminisme.\"\n```\n:::\n\n```{.r .cell-code}\n# passer en minuscule les noms des colonnes d'un jeu de données\niris %>% \n  rename_with(str_to_lower) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 150\nColumns: 5\n$ sepal.length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ sepal.width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ petal.length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ petal.width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n:::\n:::\n\n\nRessources intéressantes :\n\n\\_ [le cheatsheet de `{stringr}`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\\\n\\_ [la page de `{stringr}`](https://stringr.tidyverse.org/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}